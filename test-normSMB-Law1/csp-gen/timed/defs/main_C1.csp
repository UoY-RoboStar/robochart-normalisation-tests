
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 23-10-2022 17:43:19
--
-- Iterated compression status: true
-- Assertions compression status: false
--

	module main_C1
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel evOut: InOut
		
		
		
		-- declaring call and ret events for undefined operations
		channel op2Call
		channel op1Call
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		,	evOut
		,	op2Call,
			op1Call
		|}
		
		-- set of visible memory events
		visibleMemoryEvents = {||}

		-- defined operations
	
		-- declaring machines
		module stm0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_S1|
			              NID_S0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_x, set_x, setL_x, setR_x: core_nat
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel evOut__: NIDS.InOut
			channel evOut: InOut
			
			-- Declaring call and ret events for undefined operations
			channel op2Call
			channel op1Call
			
			enterSS = {|
			i::enter,
			S1::enter,
			S0::enter
			|}
			
			enteredSS = 	{|
			S1::entered,
			S0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	evOut
			,	op2Call,
				op1Call
				|}
			datatype ClockSet = 
				CLID_C
			
			channel clockReset, clockResetL, clockResetR : ClockSet
			
			localClockResets = {|clockReset.CLID_C|}
			
			
			channel get_CLID_C : core_clock_type 
			channel get_CLID_S1 : core_clock_type 
			channel get_CLID_S0 : core_clock_type 
			--channel increment__
			
			CLID_C_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_S1_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_S0_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
		
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: S1
				module S1
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(clockReset.CLID_C -> SKIP);share__choice(true & (share__choice(set_x!1 -> SKIP)));share__choice(get_x?x -> SHARE_WAIT(x)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; true&CALL__op1(
									 	  			id__
									 	  		) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((true&CALL__op1(
										id__
									);true&CALL__op2(
										id__
									) ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(clockReset.CLID_C -> SKIP);share__choice(true & (share__choice(set_x!1 -> SKIP)));share__choice(get_x?x -> SHARE_WAIT(x)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; true&CALL__op1(
									 	  			id__
									 	  		) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((true&CALL__op1(
										id__
									);true&CALL__op2(
										id__
									) ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks(id__) = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: S0
				module S0
				
				enterSS = 
						{|			iS0::enter,
							S0::enter
						|}
				enteredSS = 
						{|			S0::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_iS0|
					              NID_S0
					
					channel internal__ : NIDS
					channel evOut__: NIDS.InOut
					
					channel get_CLID_S0 : core_clock_type 
					--channel increment__
					
					CLID_S0_clock_type(id__) = 
						let
							max = (clock_type_max(Union({
					}))+1)
						ctype = {0..max}
					within
						if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
					
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: iS0
					module iS0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: S0
					module S0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SHARE_WAIT(1);share__choice(clockReset.CLID_C -> SKIP);true&CALL__op2(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; true&CALL__op1(
										 	  			id__
										 	  		);true&CALL__op2(
										 	  			id__
										 	  		) ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((true&CALL__op1(
											id__
										) ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SHARE_WAIT(1);share__choice(clockReset.CLID_C -> SKIP);true&CALL__op2(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; true&CALL__op1(
										 	  			id__
										 	  		);true&CALL__op2(
										 	  			id__
										 	  		) ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((true&CALL__op1(
											id__
										) ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__op1(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; true&CALL__op1(
									 	  			id__
									 	  		) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 (((dbisim(
								 	sbisim(
								 		(let
								 			-- IMPLEMENTATION NOTE:
								 			-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 			-- modules for defining the semantics of each node.
								 			enterSS = {|
								 			iS0::enter,
								 			S0::enter
								 			|}
								 			hideSet = union(enterSS,{|exit,exited,internal__|})
								 		within 
								 			((let
								 				-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 				-- because CSPM modules are used for the semantics of Node.
								 				flowevts = union(enterSS,{|exit,exited,interrupt|})
								 				transSync = {|internal__.NID_iS0|}
								 			within
								 				((
								 				 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 				   iS0::D__(id__)
								 				   [| { share__, terminate } |] (
								 				   S0::D__(id__)
								 				   )
								 				 )
								 				 [[S0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 				 [[iS0::interrupt <- x__ | x__ <- {|internal__.NID_iS0|}]]
								 				 )
								 				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 				 )
								 				 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 				|}) |]
								 				 ((iS0::enter -> Transitions(id__))
								 				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 				 )
								 				)
								 				)
								 			)
								 			 \ hideSet)
								 			[[
								 				evOut__.x____ <- evOut
								 				| x____ <- NIDS
								 			]]
								 		)
								 		[| {|get_CLID_S0,S0::entered,terminate|} |]
								 		dbisim(Clock_CLID_S0(id__,0))
								 	)\{|get_CLID_S0|}
								 )
								 ))
								  [[ share__ <- x__ | x__ <- {| share__,clockResetR.CLID_C,setR_x |} ]] 
								  [[clockReset.CLID_C <- clockResetL.CLID_C,set_x <- setL_x]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,clockResetL.CLID_C
								 			,setL_x
								 			,clockResetR.CLID_C
								 			 			,setR_x
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C,setL_x |} ]]
								  [[clockReset.CLID_C <- clockResetR.CLID_C,set_x <- setR_x]]
								 )
								)[[clockResetL.CLID_C <- clockReset.CLID_C,setL_x <- set_x]]
								 [[clockResetR.CLID_C <- clockReset.CLID_C,setR_x <- set_x]]
								)\union(enteredSS,{terminate}) 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| share__choice(get_x?x -> true&(if (x==1) then (SKIP) else (SKIP)));share__choice(clockReset.CLID_C -> SKIP) ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__op1(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; true&CALL__op1(
									 	  			id__
									 	  		) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 (((dbisim(
								 	sbisim(
								 		(let
								 			-- IMPLEMENTATION NOTE:
								 			-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 			-- modules for defining the semantics of each node.
								 			enterSS = {|
								 			iS0::enter,
								 			S0::enter
								 			|}
								 			hideSet = union(enterSS,{|exit,exited,internal__|})
								 		within 
								 			((let
								 				-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 				-- because CSPM modules are used for the semantics of Node.
								 				flowevts = union(enterSS,{|exit,exited,interrupt|})
								 				transSync = {|internal__.NID_iS0|}
								 			within
								 				((
								 				 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 				   iS0::VS_O__(id__)
								 				   [| { share__, terminate } |] (
								 				   S0::VS_O__(id__)
								 				   )
								 				 )
								 				 [[S0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 				 [[iS0::interrupt <- x__ | x__ <- {|internal__.NID_iS0|}]]
								 				 )
								 				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 				 )
								 				 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 				|}) |]
								 				 ((iS0::enter -> Transitions(id__))
								 				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 				 )
								 				)
								 				)
								 			)
								 			 \ hideSet)
								 			[[
								 				evOut__.x____ <- evOut
								 				| x____ <- NIDS
								 			]]
								 		)
								 		[| {|get_CLID_S0,S0::entered,terminate|} |]
								 		dbisim(Clock_CLID_S0(id__,0))
								 	)\{|get_CLID_S0|}
								 )
								 ))
								  [[ share__ <- x__ | x__ <- {| share__,clockResetR.CLID_C,setR_x |} ]] 
								  [[clockReset.CLID_C <- clockResetL.CLID_C,set_x <- setL_x]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,clockResetL.CLID_C
								 			,setL_x
								 			,clockResetR.CLID_C
								 			 			,setR_x
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C,setL_x |} ]]
								  [[clockReset.CLID_C <- clockResetR.CLID_C,set_x <- setR_x]]
								 )
								)[[clockResetL.CLID_C <- clockReset.CLID_C,setL_x <- set_x]]
								 [[clockResetR.CLID_C <- clockReset.CLID_C,setR_x <- set_x]]
								)\{terminate} 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| share__choice(get_x?x -> true&(if (x==1) then (SKIP) else (SKIP)));share__choice(clockReset.CLID_C -> SKIP) ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
						within
							Inactive [| {terminate} |> SKIP)
						
						Transitions(id__) = ((let
							Trans = TimeOut_1(
								 (share__ -> SKIP
								 [] dbisim((true)&(internal__!NID_iS0 -> SKIP ;  ((SKIP ; S0::enter -> SKIP))))
								 []
								 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
								 []
								 terminate -> SKIP
								 )
							,SKIP);Trans
						within
							Trans [|{terminate}|> SKIP
						)
						)
						
						
						-- Clocks
						Clock_CLID_S0(id__,x__) = 
							TimeOut_1(
								S0::entered -> Clock_CLID_S0(id__,0)
								[]
								get_CLID_S0!x__ -> Clock_CLID_S0(id__,x__)
								[]
								terminate -> SKIP,Clock_CLID_S0(id__,clock_type_plus(x__,1,CLID_S0_clock_type(id__))))
						
						StateClocks(id__) = dbisim(Clock_CLID_S0(id__,0))
						
						stateClockSync = {|get_CLID_S0,S0::entered|}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				CALL__op2(id__) = EDeadline(op2Call,0)
				CALL__op1(id__) = EDeadline(op1Call,0)
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP;true&(share__choice(evOut.out -> SKIP)) ; S0::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							S1::enter,
							S0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   S1::D__(id__)
								   [| { share__, terminate } |] (
								   S0::D__(id__)
								   )
								   )
								 )
								 [[S1::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[S0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								evOut__.x____ <- evOut
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_S1,S1::entered,get_CLID_S0,S0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_S1,S1::entered,get_CLID_S0,S0::entered|}
					 within
						(dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody(id__)
										[| {|get_CLID_S0,S0::entered,terminate|} |]
										dbisim(Clock_CLID_S0(id__,0))
									)\{|get_CLID_S0|}
								)
								[| {|get_CLID_S1,S1::entered,terminate|} |]
								dbisim(Clock_CLID_S1(id__,0))
							)\{|get_CLID_S1|}
						)
						) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {|get_x,set_x|}
						clockSync = {|get_CLID_C,clockReset.CLID_C|}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									IteratedBehaviour(id__)
									[| {|get_CLID_C,clockReset.CLID_C,terminate|} |]
									dbisim(Clock_CLID_C(id__,0))
								)\{|get_CLID_C,clockReset.CLID_C|}
							)
							[| {|get_x,set_x,terminate|} |]
							Memory_x(1)
						)\{|get_x,set_x|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							S1::enter,
							S0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   S1::VS_O__(id__)
								   [| { share__, terminate } |] (
								   S0::VS_O__(id__)
								   )
								   )
								 )
								 [[S1::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[S0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								evOut__.x____ <- evOut
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_S1,S1::entered,get_CLID_S0,S0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_S1,S1::entered,get_CLID_S0,S0::entered|}
					 within
						(dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody_VS_O(id__)
										[| {|get_CLID_S0,S0::entered,terminate|} |]
										dbisim(Clock_CLID_S0(id__,0))
									)\{|get_CLID_S0|}
								)
								[| {|get_CLID_S1,S1::entered,terminate|} |]
								dbisim(Clock_CLID_S1(id__,0))
							)\{|get_CLID_S1|}
						)
						) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_x,set_x|}
						clockSync = {|get_CLID_C,clockReset.CLID_C|}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									IteratedBehaviour_VS_O(id__)
									[| {|get_CLID_C,clockReset.CLID_C,terminate|} |]
									dbisim(Clock_CLID_C(id__,0))
								)\{|get_CLID_C,clockReset.CLID_C|}
							)
							[| {|get_x,set_x,terminate|} |]
							Memory_x(1)
						)\{|get_x,set_x|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_x(x) =
					get_x!x -> Memory_x(x)
					[]
					set_x?x__ -> Memory_x(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_x(1)
				
				getsetLocalChannels = {|get_x,set_x|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				Clock_CLID_C(id__,x__) = 
					TimeOut_1(
						clockReset.CLID_C -> Clock_CLID_C(id__,0)
						[]
						get_CLID_C!x__ -> Clock_CLID_C(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_C(id__,clock_type_plus(x__,1,CLID_C_clock_type(id__))))
				
				Clocks(id__) = dbisim(Clock_CLID_C(id__,0))
				
				clockSync = {|get_CLID_C,clockReset.CLID_C|}
				
				Clock_CLID_S1(id__,x__) = 
					TimeOut_1(
						S1::entered -> Clock_CLID_S1(id__,0)
						[]
						get_CLID_S1!x__ -> Clock_CLID_S1(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_S1(id__,clock_type_plus(x__,1,CLID_S1_clock_type(id__))))
				Clock_CLID_S0(id__,x__) = 
					TimeOut_1(
						S0::entered -> Clock_CLID_S0(id__,0)
						[]
						get_CLID_S0!x__ -> Clock_CLID_S0(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_S0(id__,clock_type_plus(x__,1,CLID_S0_clock_type(id__))))
				
				StateClocks(id__) = dbisim(Clock_CLID_S1(id__,0))
				[| { terminate } |] (
				dbisim(Clock_CLID_S0(id__,0))
				)
				
				stateClockSync = {|get_CLID_S1,S1::entered,get_CLID_S0,S0::entered|}
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
				}
		endmodule
		
		Timed(OneStep) {
				-- undefined operations
				CALL__op2(id__) 	= op2Call -> SKIP
				CALL__op1(id__) 	= op1Call -> SKIP
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = prioritise(	((
						stm0::D__(id__)[[
							stm0::terminate <- terminate,
							stm0::evOut <- evOut,
							stm0::op2Call <- op2Call,
							stm0::op1Call <- op1Call
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				-- VS version
				VS__(id__) = prioritise(	((
						stm0::VS__(id__)[[
							stm0::terminate <- terminate,
							stm0::evOut <- evOut,
							stm0::op2Call <- op2Call,
							stm0::op1Call <- op1Call
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = dbisim(prioritise(	((
						stm0::O__(id__)[[
							stm0::terminate <- terminate,
							stm0::evOut <- evOut,
							stm0::op2Call <- op2Call,
							stm0::op1Call <- op1Call
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
								
				-- VS_O version
				VS_O__(id__) = dbisim(prioritise(	((
						stm0::VS_O__(id__)[[
							stm0::terminate <- terminate,
							stm0::evOut <- evOut,
							stm0::op2Call <- op2Call,
							stm0::op1Call <- op1Call
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
		}

	endmodule
