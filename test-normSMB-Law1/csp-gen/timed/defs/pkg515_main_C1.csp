
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 23-10-2022 17:42:06
--
-- Iterated compression status: true
-- Assertions compression status: false
--

	module pkg515_main_C1
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel evOut: InOut
		
		
		
		-- declaring call and ret events for undefined operations
		channel op1Call
		channel op2Call
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		,	evOut
		,	op1Call,
			op2Call
		|}
		
		-- set of visible memory events
		visibleMemoryEvents = {||}

		-- defined operations
		-- compileOperationDef
		module OP_normal_STM_S1_during
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_f|
			              NID_t_j_2_7
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			channel op1Call
			channel op2Call
			
			enterSS = {|
			i::enter,
			f::enter,
			t_j_2_7::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	op1Call,
				op2Call
				, share__
				|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: t_j_2_7
				module t_j_2_7
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				CALL__op1(id__) = EDeadline(op1Call,0)
				CALL__op2(id__) = EDeadline(op2Call,0)
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((true&CALL__op1(
						 			id__
						 		) ; t_j_2_7::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_t_j_2_7 -> SKIP ;  ((true&CALL__op2(
						 			id__
						 		) ; f::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter,
							t_j_2_7::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_t_j_2_7|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   f::D__(id__)
								   [| { share__, terminate } |] (
								   t_j_2_7::D__(id__)
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 [[t_j_2_7::interrupt <- x__ | x__ <- {|internal__.NID_t_j_2_7|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter,
							t_j_2_7::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_t_j_2_7|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__)
								   [| { share__, terminate } |] (
								   t_j_2_7::VS_O__(id__)
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 [[t_j_2_7::interrupt <- x__ | x__ <- {|internal__.NID_t_j_2_7|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_normal_STM_i_T0_op
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_f|
			              NID_t_j_2_3
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel evOut__: NIDS.InOut
			channel evOut: InOut
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i::enter,
			f::enter,
			t_j_2_3::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	evOut
				, share__
				|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: t_j_2_3
				module t_j_2_3
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__normal_STM_i_T0_op_t_j_2_3_t_t_2_3_op(id__) = (OP_normal_STM_i_T0_op_t_j_2_3_t_t_2_3_op::O__(id__))
				[[
					OP_normal_STM_i_T0_op_t_j_2_3_t_t_2_3_op::evOut <- evOut
				]]
				CALL__normal_STM_i_T0_op_i_t_op(id__) = (OP_normal_STM_i_T0_op_i_t_op::O__(id__))
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((true&CALL__normal_STM_i_T0_op_i_t_op(
						 			id__
						 		) ; t_j_2_3::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_t_j_2_3 -> SKIP ;  ((true&CALL__normal_STM_i_T0_op_t_j_2_3_t_t_2_3_op(
						 			id__
						 		) ; f::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter,
							t_j_2_3::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_t_j_2_3|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   f::D__(id__)
								   [| { share__, terminate } |] (
								   t_j_2_3::D__(id__)
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 [[t_j_2_3::interrupt <- x__ | x__ <- {|internal__.NID_t_j_2_3|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								evOut__.x____ <- evOut
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter,
							t_j_2_3::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_t_j_2_3|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__)
								   [| { share__, terminate } |] (
								   t_j_2_3::VS_O__(id__)
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 [[t_j_2_3::interrupt <- x__ | x__ <- {|internal__.NID_t_j_2_3|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								evOut__.x____ <- evOut
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_normal_STM_S0_S0_entry
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_f|
			              NID_t_j_3_4|
			              NID_t_t_3_4_j_2_9
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			channel op2Call
			
			enterSS = {|
			i::enter,
			f::enter,
			t_j_3_4::enter,
			t_t_3_4_j_2_9::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	op2Call
				, share__
				|}
			datatype ClockSet = 
				CLID_C
			
			channel clockReset, clockResetL, clockResetR : ClockSet
			
			localClockResets = {||}
			
			
			channel get_CLID_C : core_clock_type 
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_C_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			OP_normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op::CLID_C_clock_type(id__)
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: t_j_3_4
				module t_j_3_4
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: t_t_3_4_j_2_9
				module t_t_3_4_j_2_9
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				CALL__op2(id__) = EDeadline(op2Call,0)
				
				CALL__waitOp(id__,
							param_i) = (OP_waitOp::O__(id__,
							param_i))
				CALL__normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op(id__) = (OP_normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op::O__(id__))
				[[
					OP_normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op::clockReset.OP_normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op::CLID_C <- clockReset.CLID_C
				]]
				[[ OP_normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op::get_CLID_C.x__ <- get_CLID_C.x__ 
					| x__ <- diff(OP_normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op::CLID_C_clock_type(id__),{clock_type_max(OP_normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op::CLID_C_clock_type(id__))}) ]]
				[[ OP_normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op::get_CLID_C.(clock_type_max(OP_normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op::CLID_C_clock_type(id__))) <- get_CLID_C.x__
					| x__ <- union({clock_type_max(OP_normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op::CLID_C_clock_type(id__))},
									diff(CLID_C_clock_type(id__),OP_normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op::CLID_C_clock_type(id__)))]]
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((true&CALL__waitOp(
						 			id__,
						 			1
						 		) ; t_j_3_4::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_t_j_3_4 -> SKIP ;  ((true&CALL__normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op(
						 			id__
						 		) ; t_t_3_4_j_2_9::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_t_t_3_4_j_2_9 -> SKIP ;  ((true&CALL__op2(
						 			id__
						 		) ; f::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter,
							t_j_3_4::enter,
							t_t_3_4_j_2_9::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_t_j_3_4,internal__.NID_t_t_3_4_j_2_9|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   f::D__(id__)
								   [| { share__, terminate } |] (
								   t_j_3_4::D__(id__)
								   [| { share__, terminate } |] (
								   t_t_3_4_j_2_9::D__(id__)
								   )
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 [[t_j_3_4::interrupt <- x__ | x__ <- {|internal__.NID_t_j_3_4|}]]
								 [[t_t_3_4_j_2_9::interrupt <- x__ | x__ <- {|internal__.NID_t_t_3_4_j_2_9|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter,
							t_j_3_4::enter,
							t_t_3_4_j_2_9::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_t_j_3_4,internal__.NID_t_t_3_4_j_2_9|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__)
								   [| { share__, terminate } |] (
								   t_j_3_4::VS_O__(id__)
								   [| { share__, terminate } |] (
								   t_t_3_4_j_2_9::VS_O__(id__)
								   )
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 [[t_j_3_4::interrupt <- x__ | x__ <- {|internal__.NID_t_j_3_4|}]]
								 [[t_t_3_4_j_2_9::interrupt <- x__ | x__ <- {|internal__.NID_t_t_3_4_j_2_9|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_normal_STM_S0_during
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_f|
			              NID_t_j_2_6|
			              NID_t_initialJunction_|
			              NID_t_thenJ_|
			              NID_t_elseJ_
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_x, set_x, setL_x, setR_x: core_nat
			
			-- Shared variable channels
			channel set_EXT_x: core_nat
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i::enter,
			f::enter,
			t_j_2_6::enter,
			t_initialJunction_::enter,
			t_thenJ_::enter,
			t_elseJ_::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_x
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	set_EXT_x, set_x
				, share__
				|}
			datatype ClockSet = 
				CLID_C
			
			channel clockReset, clockResetL, clockResetR : ClockSet
			
			localClockResets = {||}
			
			
			channel get_CLID_C : core_clock_type 
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_C_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			OP_normal_STM_S0_during_t_j_2_6_t_t_2_6_op::CLID_C_clock_type(id__)
			,{}
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			{}
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: t_j_2_6
				module t_j_2_6
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: t_initialJunction_
				module t_initialJunction_
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: t_thenJ_
				module t_thenJ_
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: t_elseJ_
				module t_elseJ_
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__normal_STM_S0_during_t_j_2_6_t_t_2_6_op(id__) = (OP_normal_STM_S0_during_t_j_2_6_t_t_2_6_op::O__(id__))
				[[
					OP_normal_STM_S0_during_t_j_2_6_t_t_2_6_op::clockReset.OP_normal_STM_S0_during_t_j_2_6_t_t_2_6_op::CLID_C <- clockReset.CLID_C
				]]
				[[ OP_normal_STM_S0_during_t_j_2_6_t_t_2_6_op::get_CLID_C.x__ <- get_CLID_C.x__ 
					| x__ <- diff(OP_normal_STM_S0_during_t_j_2_6_t_t_2_6_op::CLID_C_clock_type(id__),{clock_type_max(OP_normal_STM_S0_during_t_j_2_6_t_t_2_6_op::CLID_C_clock_type(id__))}) ]]
				[[ OP_normal_STM_S0_during_t_j_2_6_t_t_2_6_op::get_CLID_C.(clock_type_max(OP_normal_STM_S0_during_t_j_2_6_t_t_2_6_op::CLID_C_clock_type(id__))) <- get_CLID_C.x__
					| x__ <- union({clock_type_max(OP_normal_STM_S0_during_t_j_2_6_t_t_2_6_op::CLID_C_clock_type(id__))},
									diff(CLID_C_clock_type(id__),OP_normal_STM_S0_during_t_j_2_6_t_t_2_6_op::CLID_C_clock_type(id__)))]]
				CALL__normal_STM_S0_during_t_thenJ__t_thenTA__op(id__) = (OP_normal_STM_S0_during_t_thenJ__t_thenTA__op::O__(id__))
				CALL__normal_STM_S0_during_t_elseJ__t_elseTA__op(id__) = (OP_normal_STM_S0_during_t_elseJ__t_elseTA__op::O__(id__))
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = share__choice(get_x?x -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_t_j_2_6 -> SKIP ;  ((true&CALL__normal_STM_S0_during_t_j_2_6_t_t_2_6_op(
						 			id__
						 		) ; f::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; t_initialJunction_::enter -> SKIP))))
						 [] dbisim(((not ((x==1))))&(internal__!NID_t_initialJunction_ -> SKIP ;  ((SKIP ; t_elseJ_::enter -> SKIP))))
						 [] dbisim(((x==1))&(internal__!NID_t_initialJunction_ -> SKIP ;  ((SKIP ; t_thenJ_::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_t_thenJ_ -> SKIP ;  ((true&CALL__normal_STM_S0_during_t_thenJ__t_thenTA__op(
						 			id__
						 		) ; t_j_2_6::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_t_elseJ_ -> SKIP ;  ((true&CALL__normal_STM_S0_during_t_elseJ__t_elseTA__op(
						 			id__
						 		) ; t_j_2_6::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
					)
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter,
							t_j_2_6::enter,
							t_initialJunction_::enter,
							t_thenJ_::enter,
							t_elseJ_::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_t_j_2_6,internal__.NID_i,internal__.NID_t_initialJunction_,internal__.NID_t_initialJunction_,internal__.NID_t_thenJ_,internal__.NID_t_elseJ_|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   f::D__(id__)
								   [| { share__, terminate } |] (
								   t_j_2_6::D__(id__)
								   [| { share__, terminate } |] (
								   t_initialJunction_::D__(id__)
								   [| { share__, terminate } |] (
								   t_thenJ_::D__(id__)
								   [| { share__, terminate } |] (
								   t_elseJ_::D__(id__)
								   )
								   )
								   )
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 [[t_j_2_6::interrupt <- x__ | x__ <- {|internal__.NID_t_j_2_6|}]]
								 [[t_initialJunction_::interrupt <- x__ | x__ <- {|internal__.NID_t_initialJunction_,internal__.NID_t_initialJunction_|}]]
								 [[t_thenJ_::interrupt <- x__ | x__ <- {|internal__.NID_t_thenJ_|}]]
								 [[t_elseJ_::interrupt <- x__ | x__ <- {|internal__.NID_t_elseJ_|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_x <- setL_x]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_x
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_x |} ]]
								 )
								)[[setL_x <- set_x]]
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter,
							t_j_2_6::enter,
							t_initialJunction_::enter,
							t_thenJ_::enter,
							t_elseJ_::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_t_j_2_6,internal__.NID_i,internal__.NID_t_initialJunction_,internal__.NID_t_initialJunction_,internal__.NID_t_thenJ_,internal__.NID_t_elseJ_|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__)
								   [| { share__, terminate } |] (
								   t_j_2_6::VS_O__(id__)
								   [| { share__, terminate } |] (
								   t_initialJunction_::VS_O__(id__)
								   [| { share__, terminate } |] (
								   t_thenJ_::VS_O__(id__)
								   [| { share__, terminate } |] (
								   t_elseJ_::VS_O__(id__)
								   )
								   )
								   )
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 [[t_j_2_6::interrupt <- x__ | x__ <- {|internal__.NID_t_j_2_6|}]]
								 [[t_initialJunction_::interrupt <- x__ | x__ <- {|internal__.NID_t_initialJunction_,internal__.NID_t_initialJunction_|}]]
								 [[t_thenJ_::interrupt <- x__ | x__ <- {|internal__.NID_t_thenJ_|}]]
								 [[t_elseJ_::interrupt <- x__ | x__ <- {|internal__.NID_t_elseJ_|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_x <- setL_x]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_x
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_x |} ]]
								 )
								)[[setL_x <- set_x]]
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_normal_STM_S1_entry
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_f|
			              NID_t_j_3_2|
			              NID_t_t_3_2_j_2_8
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_x, set_x, setL_x, setR_x: core_nat
			
			-- Shared variable channels
			channel set_EXT_x: core_nat
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i::enter,
			f::enter,
			t_j_3_2::enter,
			t_t_3_2_j_2_8::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_x
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	set_EXT_x, set_x
				, share__
				|}
			datatype ClockSet = 
				CLID_C
			
			channel clockReset, clockResetL, clockResetR : ClockSet
			
			localClockResets = {||}
			
			
			channel get_CLID_C : core_clock_type 
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_C_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			OP_normal_STM_S1_entry_i_t_op::CLID_C_clock_type(id__)
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: t_j_3_2
				module t_j_3_2
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: t_t_3_2_j_2_8
				module t_t_3_2_j_2_8
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__waitOp(id__,
							param_i) = (OP_waitOp::O__(id__,
							param_i))
				CALL__normal_STM_S1_entry_i_t_op(id__) = (OP_normal_STM_S1_entry_i_t_op::O__(id__))
				[[
					OP_normal_STM_S1_entry_i_t_op::clockReset.OP_normal_STM_S1_entry_i_t_op::CLID_C <- clockReset.CLID_C
				]]
				[[ OP_normal_STM_S1_entry_i_t_op::get_CLID_C.x__ <- get_CLID_C.x__ 
					| x__ <- diff(OP_normal_STM_S1_entry_i_t_op::CLID_C_clock_type(id__),{clock_type_max(OP_normal_STM_S1_entry_i_t_op::CLID_C_clock_type(id__))}) ]]
				[[ OP_normal_STM_S1_entry_i_t_op::get_CLID_C.(clock_type_max(OP_normal_STM_S1_entry_i_t_op::CLID_C_clock_type(id__))) <- get_CLID_C.x__
					| x__ <- union({clock_type_max(OP_normal_STM_S1_entry_i_t_op::CLID_C_clock_type(id__))},
									diff(CLID_C_clock_type(id__),OP_normal_STM_S1_entry_i_t_op::CLID_C_clock_type(id__)))]]
				CALL__normal_STM_S1_entry_t_j_3_2_t_t_3_2_op(id__) = (OP_normal_STM_S1_entry_t_j_3_2_t_t_3_2_op::O__(id__))
				[[
					OP_normal_STM_S1_entry_t_j_3_2_t_t_3_2_op::get_x <- get_x,
					OP_normal_STM_S1_entry_t_j_3_2_t_t_3_2_op::set_x <- set_x
				]]
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((true&CALL__normal_STM_S1_entry_i_t_op(
						 			id__
						 		) ; t_j_3_2::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_t_j_3_2 -> SKIP ;  ((true&CALL__normal_STM_S1_entry_t_j_3_2_t_t_3_2_op(
						 			id__
						 		) ; t_t_3_2_j_2_8::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_t_t_3_2_j_2_8 -> SKIP ;  ((share__choice(get_x?x -> true&CALL__waitOp(
						 			id__,
						 			x
						 		)) ; f::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter,
							t_j_3_2::enter,
							t_t_3_2_j_2_8::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_t_j_3_2,internal__.NID_t_t_3_2_j_2_8|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   f::D__(id__)
								   [| { share__, terminate } |] (
								   t_j_3_2::D__(id__)
								   [| { share__, terminate } |] (
								   t_t_3_2_j_2_8::D__(id__)
								   )
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 [[t_j_3_2::interrupt <- x__ | x__ <- {|internal__.NID_t_j_3_2|}]]
								 [[t_t_3_2_j_2_8::interrupt <- x__ | x__ <- {|internal__.NID_t_t_3_2_j_2_8|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter,
							t_j_3_2::enter,
							t_t_3_2_j_2_8::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_t_j_3_2,internal__.NID_t_t_3_2_j_2_8|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__)
								   [| { share__, terminate } |] (
								   t_j_3_2::VS_O__(id__)
								   [| { share__, terminate } |] (
								   t_t_3_2_j_2_8::VS_O__(id__)
								   )
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 [[t_j_3_2::interrupt <- x__ | x__ <- {|internal__.NID_t_j_3_2|}]]
								 [[t_t_3_2_j_2_8::interrupt <- x__ | x__ <- {|internal__.NID_t_t_3_2_j_2_8|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_normal_STM_S0_S0_exit
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_f|
			              NID_i|
			              NID_t_j_2_5
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			channel op2Call
			channel op1Call
			
			enterSS = {|
			f::enter,
			i::enter,
			t_j_2_5::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	op2Call,
				op1Call
				, share__
				|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: t_j_2_5
				module t_j_2_5
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				CALL__op2(id__) = EDeadline(op2Call,0)
				CALL__op1(id__) = EDeadline(op1Call,0)
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((true&CALL__op1(
						 			id__
						 		) ; t_j_2_5::enter -> SKIP))))
						 [] dbisim((true)&(internal__!NID_t_j_2_5 -> SKIP ;  ((true&CALL__op2(
						 			id__
						 		) ; f::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							i::enter,
							t_j_2_5::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_t_j_2_5|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::D__(id__)
								   [| { share__, terminate } |] (
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   t_j_2_5::D__(id__)
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 [[t_j_2_5::interrupt <- x__ | x__ <- {|internal__.NID_t_j_2_5|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							i::enter,
							t_j_2_5::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_t_j_2_5|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::VS_O__(id__)
								   [| { share__, terminate } |] (
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   t_j_2_5::VS_O__(id__)
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 [[t_j_2_5::interrupt <- x__ | x__ <- {|internal__.NID_t_j_2_5|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_tStop
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_sStop|
			              NID_i
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			sStop::enter,
			i::enter
			|}
			
			enteredSS = 	{|
			sStop::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
				, share__
				|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_sStop : core_clock_type 
			--channel increment__
			
			CLID_sStop_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- State: sStop
				module sStop
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks(id__) = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; sStop::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							sStop::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   sStop::D__(id__)
								   [| { share__, terminate } |] (
								   i::D__(id__)
								   )
								 )
								 [[sStop::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_sStop,sStop::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							sStop::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   sStop::VS_O__(id__)
								   [| { share__, terminate } |] (
								   i::VS_O__(id__)
								   )
								 )
								 [[sStop::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_sStop,sStop::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				Clock_CLID_sStop(id__,x__) = 
					TimeOut_1(
						sStop::entered -> Clock_CLID_sStop(id__,0)
						[]
						get_CLID_sStop!x__ -> Clock_CLID_sStop(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_sStop(id__,clock_type_plus(x__,1,CLID_sStop_clock_type(id__))))
				
				StateClocks(id__) = dbisim(Clock_CLID_sStop(id__,0))
				
				stateClockSync = {|get_CLID_sStop,sStop::entered|}
				}
					endmodule
		-- compileOperationDef
		module OP_deadlineCheck
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_f
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i::enter,
			f::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
				, share__
				|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									param_d) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
									param_d) = D__(id__,
									param_d)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__,
									param_d) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									param_d) = D__(id__,
									param_d)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__tStop(id__) = (OP_tStop::O__(id__))
				-- END of Operation calls --
			
				-- STM processes
				STM(id__,
							param_d) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_d) \ {terminate}
				
				STM_VS_O(id__,
							param_d) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_d) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							param_d) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((Deadline(true&CALL__tStop(
						 			id__
						 		),param_d) ; f::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							param_d) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__,
								   			param_d)
								   [| { share__, terminate } |] (
								   f::D__(id__,
								   			param_d)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__,
								 			param_d))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							param_d) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__,
									param_d) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__,
							param_d) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__,
									param_d) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			param_d) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							param_d) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__,
								   			param_d)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__,
								   			param_d)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__,
								 			param_d))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							param_d) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__,
									param_d) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__,
							param_d) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__,
									param_d) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			param_d) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							param_d) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							param_d) = STM_VS_O(id__,
							param_d) \ localClockResets
				D__(id__,
							param_d) = timed_priority(STM(id__,
							param_d) \ union(internal_events,localClockResets))
				O__(id__,
							param_d) = dbisim(D__(id__,
							param_d))
				VS__(id__,
							param_d) = FVS__(id__,
							param_d)
				VS_O__(id__,
							param_d) = dbisim(FVS__(id__,
							param_d))
				HEXT__(id__,
							param_d) = O__(id__,
							param_d) [|shared_variable_events|] SKIP
				FVS_C__(id__,
							param_d) = dbisim(timed_priority(STM(id__,
							param_d) \ internal_events))
				HUP__(id__,
							param_d) = timed_priority(O__(id__,
							param_d) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_waitOp
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_f|
			              NID_Waiting|
			              NID_i0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			f::enter,
			Waiting::enter,
			i0::enter
			|}
			
			enteredSS = 	{|
			f::entered,
			Waiting::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
				, share__
				|}
			datatype ClockSet = 
				CLID_C
			
			channel clockReset, clockResetL, clockResetR : ClockSet
			
			localClockResets = {|clockReset.CLID_C|}
			
			
			channel get_CLID_f : core_clock_type 
			channel get_CLID_Waiting : core_clock_type 
			channel get_CLID_C : core_clock_type 
			--channel increment__
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			{}
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_Waiting_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			{}
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_C_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			({param_i|param_i <- core_nat})
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__,
									param_i) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									param_i) = D__(id__,
									param_i)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Waiting
				module Waiting
				
				enterSS = 
						{|			i::enter,
							SEnd::enter
						|}
				enteredSS = 
						{|			SEnd::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i|
					              NID_SEnd
					
					channel internal__ : NIDS
					
					channel get_CLID_SEnd : core_clock_type 
					--channel increment__
					
					CLID_SEnd_clock_type(id__) = 
						let
							max = (clock_type_max(Union({
					}))+1)
						ctype = {0..max}
					within
						if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
					
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i
					module i
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										param_i) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
										param_i) = D__(id__,
										param_i)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: SEnd
					module SEnd
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
										param_i) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										param_i) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
									param_i) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 (((dbisim(
								 	sbisim(
								 		(let
								 			-- IMPLEMENTATION NOTE:
								 			-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 			-- modules for defining the semantics of each node.
								 			enterSS = {|
								 			i::enter,
								 			SEnd::enter
								 			|}
								 			hideSet = union(enterSS,{|exit,exited,internal__|})
								 		within 
								 			((let
								 				-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 				-- because CSPM modules are used for the semantics of Node.
								 				flowevts = union(enterSS,{|exit,exited,interrupt|})
								 				transSync = {|internal__.NID_i|}
								 			within
								 				((
								 				 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 				   i::D__(id__,
								 				   			param_i)
								 				   [| { share__, terminate } |] (
								 				   SEnd::D__(id__,
								 				   			param_i)
								 				   )
								 				 )
								 				 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
								 				 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 				 )
								 				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 				 )
								 				 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 				|}) |]
								 				 ((i::enter -> Transitions(id__,
								 				 			param_i))
								 				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 				 )
								 				)
								 				)
								 			)
								 			 \ hideSet)
								 		)
								 		[| {|get_CLID_SEnd,SEnd::entered,terminate|} |]
								 		dbisim(Clock_CLID_SEnd(id__,0))
								 	)\{|get_CLID_SEnd|}
								 )
								 ))
								  [[ share__ <- x__ | x__ <- {| share__,clockResetR.CLID_C |} ]] 
								  [[clockReset.CLID_C <- clockResetL.CLID_C]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,clockResetL.CLID_C
								 			,clockResetR.CLID_C
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
								  [[clockReset.CLID_C <- clockResetR.CLID_C]]
								 )
								)[[clockResetL.CLID_C <- clockReset.CLID_C]]
								 [[clockResetR.CLID_C <- clockReset.CLID_C]]
								)\union(enteredSS,{terminate}) 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									param_i) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 (((dbisim(
								 	sbisim(
								 		(let
								 			-- IMPLEMENTATION NOTE:
								 			-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 			-- modules for defining the semantics of each node.
								 			enterSS = {|
								 			i::enter,
								 			SEnd::enter
								 			|}
								 			hideSet = union(enterSS,{|exit,exited,internal__|})
								 		within 
								 			((let
								 				-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 				-- because CSPM modules are used for the semantics of Node.
								 				flowevts = union(enterSS,{|exit,exited,interrupt|})
								 				transSync = {|internal__.NID_i|}
								 			within
								 				((
								 				 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 				   i::VS_O__(id__,
								 				   			param_i)
								 				   [| { share__, terminate } |] (
								 				   SEnd::VS_O__(id__,
								 				   			param_i)
								 				   )
								 				 )
								 				 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
								 				 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 				 )
								 				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 				 )
								 				 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 				|}) |]
								 				 ((i::enter -> Transitions(id__,
								 				 			param_i))
								 				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 				 )
								 				)
								 				)
								 			)
								 			 \ hideSet)
								 		)
								 		[| {|get_CLID_SEnd,SEnd::entered,terminate|} |]
								 		dbisim(Clock_CLID_SEnd(id__,0))
								 	)\{|get_CLID_SEnd|}
								 )
								 ))
								  [[ share__ <- x__ | x__ <- {| share__,clockResetR.CLID_C |} ]] 
								  [[clockReset.CLID_C <- clockResetL.CLID_C]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,clockResetL.CLID_C
								 			,clockResetR.CLID_C
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
								  [[clockReset.CLID_C <- clockResetR.CLID_C]]
								 )
								)[[clockResetL.CLID_C <- clockReset.CLID_C]]
								 [[clockResetR.CLID_C <- clockReset.CLID_C]]
								)\{terminate} 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
						within
							Inactive [| {terminate} |> SKIP)
						
						Transitions(id__,
									param_i) = ((let
							Trans = TimeOut_1(
								 (share__ -> SKIP
								 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; SEnd::enter -> SKIP))))
								 []
								 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
								 []
								 terminate -> SKIP
								 )
							,SKIP);Trans
						within
							Trans [|{terminate}|> SKIP
						)
						)
						
						
						-- Clocks
						Clock_CLID_SEnd(id__,x__) = 
							TimeOut_1(
								SEnd::entered -> Clock_CLID_SEnd(id__,0)
								[]
								get_CLID_SEnd!x__ -> Clock_CLID_SEnd(id__,x__)
								[]
								terminate -> SKIP,Clock_CLID_SEnd(id__,clock_type_plus(x__,1,CLID_SEnd_clock_type(id__))))
						
						StateClocks(id__) = dbisim(Clock_CLID_SEnd(id__,0))
						
						stateClockSync = {|get_CLID_SEnd,SEnd::entered|}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									param_i) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
									param_i) = D__(id__,
									param_i)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__,
							param_i) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_i) \ {terminate}
				
				STM_VS_O(id__,
							param_i) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_i) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							param_i) = ((let
					Trans = share__choice(get_CLID_C?C:CLID_C_clock_type(id__) -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim(((C==param_i))&(internal__!NID_Waiting -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f::enter -> SKIP)))
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(clockReset.CLID_C -> SKIP) ; Waiting::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
					)
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							param_i) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							Waiting::enter,
							i0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_Waiting,internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::D__(id__,
								   			param_i)
								   [| { share__, terminate } |] (
								   Waiting::D__(id__,
								   			param_i)
								   [| { share__, terminate } |] (
								   i0::D__(id__,
								   			param_i)
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Waiting|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[clockReset.CLID_C <- clockResetL.CLID_C]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,clockResetL.CLID_C
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_i))
								  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
								 )
								)[[clockResetL.CLID_C <- clockReset.CLID_C]]
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							param_i) = 
					dbisim((let
						stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
					 within
						(MachineBody(id__,
									param_i) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__,
							param_i) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {|get_CLID_C,clockReset.CLID_C|}
					within
						(Behaviour(id__,
									param_i) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			param_i) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							param_i) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							Waiting::enter,
							i0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_Waiting,internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::VS_O__(id__,
								   			param_i)
								   [| { share__, terminate } |] (
								   Waiting::VS_O__(id__,
								   			param_i)
								   [| { share__, terminate } |] (
								   i0::VS_O__(id__,
								   			param_i)
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Waiting|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[clockReset.CLID_C <- clockResetL.CLID_C]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,clockResetL.CLID_C
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_i))
								  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
								 )
								)[[clockResetL.CLID_C <- clockReset.CLID_C]]
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							param_i) = 
					dbisim((let
						stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
					 within
						(MachineBody_VS_O(id__,
									param_i) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__,
							param_i) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {|get_CLID_C,clockReset.CLID_C|}
					within
						(Behaviour_VS_O(id__,
									param_i) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			param_i) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							param_i) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							param_i) = STM_VS_O(id__,
							param_i) \ localClockResets
				D__(id__,
							param_i) = timed_priority(STM(id__,
							param_i) \ union(internal_events,localClockResets))
				O__(id__,
							param_i) = dbisim(D__(id__,
							param_i))
				VS__(id__,
							param_i) = FVS__(id__,
							param_i)
				VS_O__(id__,
							param_i) = dbisim(FVS__(id__,
							param_i))
				HEXT__(id__,
							param_i) = O__(id__,
							param_i) [|shared_variable_events|] SKIP
				FVS_C__(id__,
							param_i) = dbisim(timed_priority(STM(id__,
							param_i) \ internal_events))
				HUP__(id__,
							param_i) = timed_priority(O__(id__,
							param_i) [|{share__}|] SKIP)
				
				-- Clocks
				Clock_CLID_C(id__,x__) = 
					TimeOut_1(
						clockReset.CLID_C -> Clock_CLID_C(id__,0)
						[]
						get_CLID_C!x__ -> Clock_CLID_C(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_C(id__,clock_type_plus(x__,1,CLID_C_clock_type(id__))))
				
				Clocks(id__) = dbisim(Clock_CLID_C(id__,0))
				
				clockSync = {|get_CLID_C,clockReset.CLID_C|}
				
				Clock_CLID_Waiting(id__,x__) = 
					TimeOut_1(
						Waiting::entered -> Clock_CLID_Waiting(id__,0)
						[]
						get_CLID_Waiting!x__ -> Clock_CLID_Waiting(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_Waiting(id__,clock_type_plus(x__,1,CLID_Waiting_clock_type(id__))))
				
				StateClocks(id__) = dbisim(Clock_CLID_Waiting(id__,0))
				
				stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
				}
					endmodule
		-- compileOperationDef
		module OP_waitInterval
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_f|
			              NID_j|
			              NID_i
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			f::enter,
			j::enter,
			i::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
				, share__
				|}
			datatype ClockSet = 
				CLID_C
			
			channel clockReset, clockResetL, clockResetR : ClockSet
			
			localClockResets = {|clockReset.CLID_C|}
			
			
			channel get_CLID_C : core_clock_type 
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_C_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			({param_m|param_m <- core_nat}),
			({param_n|param_n <- core_nat})
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			{}
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__,
									param_m,
									param_n) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									param_m,
									param_n) = D__(id__,
									param_m,
									param_n)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j
				module j
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									param_m,
									param_n) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									param_m,
									param_n) = D__(id__,
									param_m,
									param_n)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__,
									param_m,
									param_n) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
									param_m,
									param_n) = D__(id__,
									param_m,
									param_n)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__waitOp(id__,
							param_i) = (OP_waitOp::O__(id__,
							param_i))
				-- END of Operation calls --
			
				-- STM processes
				STM(id__,
							param_m,
							param_n) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_m,
							param_n) \ {terminate}
				
				STM_VS_O(id__,
							param_m,
							param_n) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_m,
							param_n) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							param_m,
							param_n) = ((let
					Trans = share__choice(get_CLID_C?C:CLID_C_clock_type(id__) -> TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((share__choice(clockReset.CLID_C -> SKIP) ; j::enter -> SKIP))))
						 [] dbisim(((C>=param_m))&(internal__!NID_j -> SKIP ;  ((SKIP ; f::enter -> SKIP))))
						 [] dbisim(((C<param_n))&(internal__!NID_j -> SKIP ;  ((true&CALL__waitOp(
						 			id__,
						 			1
						 		) ; j::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
					)
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							param_m,
							param_n) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							j::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_j,internal__.NID_j|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::D__(id__,
								   			param_m,
								   			param_n)
								   [| { share__, terminate } |] (
								   j::D__(id__,
								   			param_m,
								   			param_n)
								   [| { share__, terminate } |] (
								   i::D__(id__,
								   			param_m,
								   			param_n)
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[j::interrupt <- x__ | x__ <- {|internal__.NID_j,internal__.NID_j|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[clockReset.CLID_C <- clockResetL.CLID_C]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,clockResetL.CLID_C
								|}) |]
								 ((i::enter -> Transitions(id__,
								 			param_m,
								 			param_n))
								  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
								 )
								)[[clockResetL.CLID_C <- clockReset.CLID_C]]
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							param_m,
							param_n) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__,
									param_m,
									param_n) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__,
							param_m,
							param_n) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {|get_CLID_C,clockReset.CLID_C|}
					within
						(Behaviour(id__,
									param_m,
									param_n) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			param_m,
						 			param_n) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							param_m,
							param_n) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							j::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_j,internal__.NID_j|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::VS_O__(id__,
								   			param_m,
								   			param_n)
								   [| { share__, terminate } |] (
								   j::VS_O__(id__,
								   			param_m,
								   			param_n)
								   [| { share__, terminate } |] (
								   i::VS_O__(id__,
								   			param_m,
								   			param_n)
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[j::interrupt <- x__ | x__ <- {|internal__.NID_j,internal__.NID_j|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[clockReset.CLID_C <- clockResetL.CLID_C]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,clockResetL.CLID_C
								|}) |]
								 ((i::enter -> Transitions(id__,
								 			param_m,
								 			param_n))
								  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
								 )
								)[[clockResetL.CLID_C <- clockReset.CLID_C]]
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							param_m,
							param_n) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__,
									param_m,
									param_n) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__,
							param_m,
							param_n) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {|get_CLID_C,clockReset.CLID_C|}
					within
						(Behaviour_VS_O(id__,
									param_m,
									param_n) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__,
						 			param_m,
						 			param_n) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							param_m,
							param_n) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							param_m,
							param_n) = STM_VS_O(id__,
							param_m,
							param_n) \ localClockResets
				D__(id__,
							param_m,
							param_n) = timed_priority(STM(id__,
							param_m,
							param_n) \ union(internal_events,localClockResets))
				O__(id__,
							param_m,
							param_n) = dbisim(D__(id__,
							param_m,
							param_n))
				VS__(id__,
							param_m,
							param_n) = FVS__(id__,
							param_m,
							param_n)
				VS_O__(id__,
							param_m,
							param_n) = dbisim(FVS__(id__,
							param_m,
							param_n))
				HEXT__(id__,
							param_m,
							param_n) = O__(id__,
							param_m,
							param_n) [|shared_variable_events|] SKIP
				FVS_C__(id__,
							param_m,
							param_n) = dbisim(timed_priority(STM(id__,
							param_m,
							param_n) \ internal_events))
				HUP__(id__,
							param_m,
							param_n) = timed_priority(O__(id__,
							param_m,
							param_n) [|{share__}|] SKIP)
				
				-- Clocks
				Clock_CLID_C(id__,x__) = 
					TimeOut_1(
						clockReset.CLID_C -> Clock_CLID_C(id__,0)
						[]
						get_CLID_C!x__ -> Clock_CLID_C(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_C(id__,clock_type_plus(x__,1,CLID_C_clock_type(id__))))
				
				Clocks(id__) = dbisim(Clock_CLID_C(id__,0))
				
				clockSync = {|get_CLID_C,clockReset.CLID_C|}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_normal_STM_i_T0_op_t_j_2_3_t_t_2_3_op
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_f
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel evOut__: NIDS.InOut
			channel evOut: InOut
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i::enter,
			f::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	evOut
				, share__
				|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((true&(share__choice(evOut.out -> SKIP)) ; f::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   f::D__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								evOut__.x____ <- evOut
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								evOut__.x____ <- evOut
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_normal_STM_S0_during_t_thenJ__t_thenTA__op
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_f|
			              NID_i
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			f::enter,
			i::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
				, share__
				|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; f::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::D__(id__)
								   [| { share__, terminate } |] (
								   i::D__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::VS_O__(id__)
								   [| { share__, terminate } |] (
								   i::VS_O__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_normal_STM_S1_entry_i_t_op
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_f|
			              NID_i
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			f::enter,
			i::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
				, share__
				|}
			datatype ClockSet = 
				CLID_C
			
			channel clockReset, clockResetL, clockResetR : ClockSet
			
			localClockResets = {||}
			
			
			channel get_CLID_C : core_clock_type 
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_C_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((share__choice(clockReset.CLID_C -> SKIP) ; f::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::D__(id__)
								   [| { share__, terminate } |] (
								   i::D__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::VS_O__(id__)
								   [| { share__, terminate } |] (
								   i::VS_O__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_normal_STM_S0_during_t_j_2_6_t_t_2_6_op
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_f|
			              NID_i
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			f::enter,
			i::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
				, share__
				|}
			datatype ClockSet = 
				CLID_C
			
			channel clockReset, clockResetL, clockResetR : ClockSet
			
			localClockResets = {||}
			
			
			channel get_CLID_C : core_clock_type 
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_C_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((share__choice(clockReset.CLID_C -> SKIP) ; f::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::D__(id__)
								   [| { share__, terminate } |] (
								   i::D__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::VS_O__(id__)
								   [| { share__, terminate } |] (
								   i::VS_O__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_normal_STM_S1_entry_t_j_3_2_t_t_3_2_op
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_f|
			              NID_i
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_x, set_x, setL_x, setR_x: core_nat
			
			-- Shared variable channels
			channel set_EXT_x: core_nat
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			f::enter,
			i::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_x
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	set_EXT_x, set_x
				, share__
				|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((share__choice(true & (share__choice(set_x!1 -> SKIP))) ; f::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::D__(id__)
								   [| { share__, terminate } |] (
								   i::D__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::VS_O__(id__)
								   [| { share__, terminate } |] (
								   i::VS_O__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_normal_STM_i_T0_op_i_t_op
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_f
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i::enter,
			f::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
				, share__
				|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; f::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   f::D__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_f
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i::enter,
			f::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
				, share__
				|}
			datatype ClockSet = 
				CLID_C
			
			channel clockReset, clockResetL, clockResetR : ClockSet
			
			localClockResets = {||}
			
			
			channel get_CLID_C : core_clock_type 
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_C_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((share__choice(clockReset.CLID_C -> SKIP) ; f::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   f::D__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
		-- compileOperationDef
		module OP_normal_STM_S0_during_t_elseJ__t_elseTA__op
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_f
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i::enter,
			f::enter
			|}
			
			enteredSS = 	{|
			f::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
				, share__
				|}
			
			channel clockReset, clockResetL, clockResetR 
			
			localClockResets = {||}
			
			
			channel get_CLID_f : core_clock_type 
			--channel increment__
			
			CLID_f_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; f::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   f::D__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {||}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {||}
						clockSync = {||}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				
				Clocks(id__) = terminate -> SKIP
				
				clockSync = {||}
				
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
				}
					endmodule
	
		-- declaring machines
		module stm0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_S1|
			              NID_S0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_x, set_x, setL_x, setR_x: core_nat
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel evOut__: NIDS.InOut
			channel evOut: InOut
			
			-- Declaring call and ret events for undefined operations
			channel op1Call
			channel op2Call
			
			enterSS = {|
			i::enter,
			S1::enter,
			S0::enter
			|}
			
			enteredSS = 	{|
			S1::entered,
			S0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	evOut
			,	op1Call,
				op2Call
				|}
			datatype ClockSet = 
				CLID_C
			
			channel clockReset, clockResetL, clockResetR : ClockSet
			
			localClockResets = {|clockReset.CLID_C|}
			
			
			channel get_CLID_S1 : core_clock_type 
			channel get_CLID_C : core_clock_type 
			channel get_CLID_S0 : core_clock_type 
			--channel increment__
			
			CLID_S1_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_C_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			OP_normal_STM_S0_S0_entry::CLID_C_clock_type(id__),
			OP_normal_STM_S0_during_t_j_2_6_t_t_2_6_op::CLID_C_clock_type(id__),
			OP_normal_STM_S1_entry_i_t_op::CLID_C_clock_type(id__),
			OP_normal_STM_S0_S0_entry_t_j_3_4_t_t_3_4_op::CLID_C_clock_type(id__),
			OP_normal_STM_S1_entry::CLID_C_clock_type(id__),
			OP_normal_STM_S0_during::CLID_C_clock_type(id__)
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			CLID_S0_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
		
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					Timed(OneStep) {
						D__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__) = D__(id__)
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: S1
				module S1
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--channel increment__
					
					
					--	Nodes
					-- declaring all nodes
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__normal_STM_S1_entry(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; true&CALL__op1(
									 	  			id__
									 	  		) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((true&CALL__normal_STM_S1_during(
										id__
									) ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__normal_STM_S1_entry(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; true&CALL__op1(
									 	  			id__
									 	  		) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((true&CALL__normal_STM_S1_during(
										id__
									) ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
						
						-- Clocks
						
						StateClocks(id__) = terminate -> SKIP
						
						stateClockSync = {||}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: S0
				module S0
				
				enterSS = 
						{|			iS0::enter,
							S0::enter
						|}
				enteredSS = 
						{|			S0::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_iS0|
					              NID_S0
					
					channel internal__ : NIDS
					channel evOut__: NIDS.InOut
					
					channel get_CLID_S0 : core_clock_type 
					--channel increment__
					
					CLID_S0_clock_type(id__) = 
						let
							max = (clock_type_max(Union({
					}))+1)
						ctype = {0..max}
					within
						if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
					
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: iS0
					module iS0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: S0
					module S0
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__normal_STM_S0_S0_entry(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; true&CALL__normal_STM_S0_S0_exit(
										 	  			id__
										 	  		) ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((true&CALL__op1(
											id__
										) ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__normal_STM_S0_S0_entry(
											id__
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; true&CALL__normal_STM_S0_S0_exit(
										 	  			id__
										 	  		) ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((true&CALL__op1(
											id__
										) ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					Timed(OneStep) {
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__op1(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; true&CALL__op1(
									 	  			id__
									 	  		) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 (((dbisim(
								 	sbisim(
								 		(let
								 			-- IMPLEMENTATION NOTE:
								 			-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 			-- modules for defining the semantics of each node.
								 			enterSS = {|
								 			iS0::enter,
								 			S0::enter
								 			|}
								 			hideSet = union(enterSS,{|exit,exited,internal__|})
								 		within 
								 			((let
								 				-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 				-- because CSPM modules are used for the semantics of Node.
								 				flowevts = union(enterSS,{|exit,exited,interrupt|})
								 				transSync = {|internal__.NID_iS0|}
								 			within
								 				((
								 				 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 				   iS0::D__(id__)
								 				   [| { share__, terminate } |] (
								 				   S0::D__(id__)
								 				   )
								 				 )
								 				 [[S0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 				 [[iS0::interrupt <- x__ | x__ <- {|internal__.NID_iS0|}]]
								 				 )
								 				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 				 )
								 				 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 				|}) |]
								 				 ((iS0::enter -> Transitions(id__))
								 				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 				 )
								 				)
								 				)
								 			)
								 			 \ hideSet)
								 			[[
								 				evOut__.x____ <- evOut
								 				| x____ <- NIDS
								 			]]
								 		)
								 		[| {|get_CLID_S0,S0::entered,terminate|} |]
								 		dbisim(Clock_CLID_S0(id__,0))
								 	)\{|get_CLID_S0|}
								 )
								 ))
								  [[ share__ <- x__ | x__ <- {| share__,clockResetR.CLID_C,setR_x |} ]] 
								  [[clockReset.CLID_C <- clockResetL.CLID_C,set_x <- setL_x]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,clockResetL.CLID_C
								 			,setL_x
								 			,clockResetR.CLID_C
								 			 			,setR_x
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C,setL_x |} ]]
								  [[clockReset.CLID_C <- clockResetR.CLID_C,set_x <- setR_x]]
								 )
								)[[clockResetL.CLID_C <- clockReset.CLID_C,setL_x <- set_x]]
								 [[clockResetR.CLID_C <- clockReset.CLID_C,setR_x <- set_x]]
								)\union(enteredSS,{terminate}) 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| true&CALL__normal_STM_S0_during(
									 	  			id__
									 	  		) ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= true&CALL__op1(
										id__
									) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; true&CALL__op1(
									 	  			id__
									 	  		) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
						
							Behaviour 	= dbisim(
								((
								 (((dbisim(
								 	sbisim(
								 		(let
								 			-- IMPLEMENTATION NOTE:
								 			-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								 			-- modules for defining the semantics of each node.
								 			enterSS = {|
								 			iS0::enter,
								 			S0::enter
								 			|}
								 			hideSet = union(enterSS,{|exit,exited,internal__|})
								 		within 
								 			((let
								 				-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								 				-- because CSPM modules are used for the semantics of Node.
								 				flowevts = union(enterSS,{|exit,exited,interrupt|})
								 				transSync = {|internal__.NID_iS0|}
								 			within
								 				((
								 				 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								 				   iS0::VS_O__(id__)
								 				   [| { share__, terminate } |] (
								 				   S0::VS_O__(id__)
								 				   )
								 				 )
								 				 [[S0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 				 [[iS0::interrupt <- x__ | x__ <- {|internal__.NID_iS0|}]]
								 				 )
								 				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 				 )
								 				 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 				|}) |]
								 				 ((iS0::enter -> Transitions(id__))
								 				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 				 )
								 				)
								 				)
								 			)
								 			 \ hideSet)
								 			[[
								 				evOut__.x____ <- evOut
								 				| x____ <- NIDS
								 			]]
								 		)
								 		[| {|get_CLID_S0,S0::entered,terminate|} |]
								 		dbisim(Clock_CLID_S0(id__,0))
								 	)\{|get_CLID_S0|}
								 )
								 ))
								  [[ share__ <- x__ | x__ <- {| share__,clockResetR.CLID_C,setR_x |} ]] 
								  [[clockReset.CLID_C <- clockResetL.CLID_C,set_x <- setL_x]]
								 )
								 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
								 			,clockResetL.CLID_C
								 			,setL_x
								 			,clockResetR.CLID_C
								 			 			,setR_x
								 			|}) |]
								 ((During)
								  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C,setL_x |} ]]
								  [[clockReset.CLID_C <- clockResetR.CLID_C,set_x <- setR_x]]
								 )
								)[[clockResetL.CLID_C <- clockReset.CLID_C,setL_x <- set_x]]
								 [[clockResetR.CLID_C <- clockReset.CLID_C,setR_x <- set_x]]
								)\{terminate} 
							)
							During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
									 	  ; entered -> ((CRUN(enteredSS) ||| true&CALL__normal_STM_S0_during(
									 	  			id__
									 	  		) ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
						within
							Inactive [| {terminate} |> SKIP)
						
						Transitions(id__) = ((let
							Trans = TimeOut_1(
								 (share__ -> SKIP
								 [] dbisim((true)&(internal__!NID_iS0 -> SKIP ;  ((SKIP ; S0::enter -> SKIP))))
								 []
								 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
								 []
								 terminate -> SKIP
								 )
							,SKIP);Trans
						within
							Trans [|{terminate}|> SKIP
						)
						)
						
						
						-- Clocks
						Clock_CLID_S0(id__,x__) = 
							TimeOut_1(
								S0::entered -> Clock_CLID_S0(id__,0)
								[]
								get_CLID_S0!x__ -> Clock_CLID_S0(id__,x__)
								[]
								terminate -> SKIP,Clock_CLID_S0(id__,clock_type_plus(x__,1,CLID_S0_clock_type(id__))))
						
						StateClocks(id__) = dbisim(Clock_CLID_S0(id__,0))
						
						stateClockSync = {|get_CLID_S0,S0::entered|}
					}
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				Timed(OneStep) {
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				CALL__op1(id__) = EDeadline(op1Call,0)
				CALL__op2(id__) = EDeadline(op2Call,0)
				
				CALL__normal_STM_S0_S0_entry(id__) = (OP_normal_STM_S0_S0_entry::O__(id__))
				[[
					OP_normal_STM_S0_S0_entry::op2Call <- op2Call
				]]
				[[
					OP_normal_STM_S0_S0_entry::clockReset.OP_normal_STM_S0_S0_entry::CLID_C <- clockReset.CLID_C
				]]
				[[ OP_normal_STM_S0_S0_entry::get_CLID_C.x__ <- get_CLID_C.x__ 
					| x__ <- diff(OP_normal_STM_S0_S0_entry::CLID_C_clock_type(id__),{clock_type_max(OP_normal_STM_S0_S0_entry::CLID_C_clock_type(id__))}) ]]
				[[ OP_normal_STM_S0_S0_entry::get_CLID_C.(clock_type_max(OP_normal_STM_S0_S0_entry::CLID_C_clock_type(id__))) <- get_CLID_C.x__
					| x__ <- union({clock_type_max(OP_normal_STM_S0_S0_entry::CLID_C_clock_type(id__))},
									diff(CLID_C_clock_type(id__),OP_normal_STM_S0_S0_entry::CLID_C_clock_type(id__)))]]
				CALL__normal_STM_S1_during(id__) = (OP_normal_STM_S1_during::O__(id__))
				[[
					OP_normal_STM_S1_during::op1Call <- op1Call,
					OP_normal_STM_S1_during::op2Call <- op2Call
				]]
				CALL__normal_STM_S0_S0_exit(id__) = (OP_normal_STM_S0_S0_exit::O__(id__))
				[[
					OP_normal_STM_S0_S0_exit::op2Call <- op2Call,
					OP_normal_STM_S0_S0_exit::op1Call <- op1Call
				]]
				CALL__normal_STM_i_T0_op(id__) = (OP_normal_STM_i_T0_op::O__(id__))
				[[
					OP_normal_STM_i_T0_op::evOut <- evOut
				]]
				CALL__normal_STM_S1_entry(id__) = (OP_normal_STM_S1_entry::O__(id__))
				[[
					OP_normal_STM_S1_entry::get_x <- get_x,
					OP_normal_STM_S1_entry::set_x <- set_x
				]]
				[[
					OP_normal_STM_S1_entry::clockReset.OP_normal_STM_S1_entry::CLID_C <- clockReset.CLID_C
				]]
				[[ OP_normal_STM_S1_entry::get_CLID_C.x__ <- get_CLID_C.x__ 
					| x__ <- diff(OP_normal_STM_S1_entry::CLID_C_clock_type(id__),{clock_type_max(OP_normal_STM_S1_entry::CLID_C_clock_type(id__))}) ]]
				[[ OP_normal_STM_S1_entry::get_CLID_C.(clock_type_max(OP_normal_STM_S1_entry::CLID_C_clock_type(id__))) <- get_CLID_C.x__
					| x__ <- union({clock_type_max(OP_normal_STM_S1_entry::CLID_C_clock_type(id__))},
									diff(CLID_C_clock_type(id__),OP_normal_STM_S1_entry::CLID_C_clock_type(id__)))]]
				CALL__normal_STM_S0_during(id__) = (OP_normal_STM_S0_during::O__(id__))
				[[
					OP_normal_STM_S0_during::get_x <- get_x,
					OP_normal_STM_S0_during::set_x <- set_x
				]]
				[[
					OP_normal_STM_S0_during::clockReset.OP_normal_STM_S0_during::CLID_C <- clockReset.CLID_C
				]]
				[[ OP_normal_STM_S0_during::get_CLID_C.x__ <- get_CLID_C.x__ 
					| x__ <- diff(OP_normal_STM_S0_during::CLID_C_clock_type(id__),{clock_type_max(OP_normal_STM_S0_during::CLID_C_clock_type(id__))}) ]]
				[[ OP_normal_STM_S0_during::get_CLID_C.(clock_type_max(OP_normal_STM_S0_during::CLID_C_clock_type(id__))) <- get_CLID_C.x__
					| x__ <- union({clock_type_max(OP_normal_STM_S0_during::CLID_C_clock_type(id__))},
									diff(CLID_C_clock_type(id__),OP_normal_STM_S0_during::CLID_C_clock_type(id__)))]]
				-- END of Operation calls --
			
				-- STM processes
				STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				,<{terminate},{tock}>)
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((true&CALL__normal_STM_i_T0_op(
						 			id__
						 		) ; S0::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							S1::enter,
							S0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__)
								   [| { share__, terminate } |] (
								   S1::D__(id__)
								   [| { share__, terminate } |] (
								   S0::D__(id__)
								   )
								   )
								 )
								 [[S1::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[S0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								evOut__.x____ <- evOut
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_S1,S1::entered,get_CLID_S0,S0::entered|}
					 within
						(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
					)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_S1,S1::entered,get_CLID_S0,S0::entered|}
					 within
						(dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody(id__)
										[| {|get_CLID_S0,S0::entered,terminate|} |]
										dbisim(Clock_CLID_S0(id__,0))
									)\{|get_CLID_S0|}
								)
								[| {|get_CLID_S1,S1::entered,terminate|} |]
								dbisim(Clock_CLID_S1(id__,0))
							)\{|get_CLID_S1|}
						)
						) \ union(stateClockSync,enteredSS)
					)
					)
				
				Stateful(id__) = 
					((let
						getsetLocalChannels = {|get_x,set_x|}
						clockSync = {|get_CLID_C,clockReset.CLID_C|}
					within
						(Behaviour(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									IteratedBehaviour(id__)
									[| {|get_CLID_C,clockReset.CLID_C,terminate|} |]
									dbisim(Clock_CLID_C(id__,0))
								)\{|get_CLID_C,clockReset.CLID_C|}
							)
							[| {|get_x,set_x,terminate|} |]
							Memory_x(1)
						)\{|get_x,set_x|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						(dbisim((dbisim((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							S1::enter,
							S0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__)
								   [| { share__, terminate } |] (
								   S1::VS_O__(id__)
								   [| { share__, terminate } |] (
								   S0::VS_O__(id__)
								   )
								   )
								 )
								 [[S1::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[S0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								evOut__.x____ <- evOut
								| x____ <- NIDS
							]]
						)
						)
						 [| union(stateClockSync,{terminate}) |]
						 StateClocks(id__)
						)\diff(stateClockSync,enteredSS))
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_S1,S1::entered,get_CLID_S0,S0::entered|}
					 within
						(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((let
						stateClockSync = {|get_CLID_S1,S1::entered,get_CLID_S0,S0::entered|}
					 within
						(dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody_VS_O(id__)
										[| {|get_CLID_S0,S0::entered,terminate|} |]
										dbisim(Clock_CLID_S0(id__,0))
									)\{|get_CLID_S0|}
								)
								[| {|get_CLID_S1,S1::entered,terminate|} |]
								dbisim(Clock_CLID_S1(id__,0))
							)\{|get_CLID_S1|}
						)
						) \ diff(union(stateClockSync,enteredSS),enteredSS)
					)
					)
				
				Stateful_VS_O(id__) = 
					dbisim((let
						getsetLocalChannels = {|get_x,set_x|}
						clockSync = {|get_CLID_C,clockReset.CLID_C|}
					within
						(Behaviour_VS_O(id__) 
						 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
						 (varMemory(id__) [| {terminate} |] Clocks(id__))
					 	)\union(getsetLocalChannels,clockSync)
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									IteratedBehaviour_VS_O(id__)
									[| {|get_CLID_C,clockReset.CLID_C,terminate|} |]
									dbisim(Clock_CLID_C(id__,0))
								)\{|get_CLID_C,clockReset.CLID_C|}
							)
							[| {|get_x,set_x,terminate|} |]
							Memory_x(1)
						)\{|get_x,set_x|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_x(x) =
					get_x!x -> Memory_x(x)
					[]
					set_x?x__ -> Memory_x(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_x(1)
				
				getsetLocalChannels = {|get_x,set_x|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__) \ localClockResets
				D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
				O__(id__) = dbisim(D__(id__))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = dbisim(FVS__(id__))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
				HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
				
				-- Clocks
				Clock_CLID_C(id__,x__) = 
					TimeOut_1(
						clockReset.CLID_C -> Clock_CLID_C(id__,0)
						[]
						get_CLID_C!x__ -> Clock_CLID_C(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_C(id__,clock_type_plus(x__,1,CLID_C_clock_type(id__))))
				
				Clocks(id__) = dbisim(Clock_CLID_C(id__,0))
				
				clockSync = {|get_CLID_C,clockReset.CLID_C|}
				
				Clock_CLID_S1(id__,x__) = 
					TimeOut_1(
						S1::entered -> Clock_CLID_S1(id__,0)
						[]
						get_CLID_S1!x__ -> Clock_CLID_S1(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_S1(id__,clock_type_plus(x__,1,CLID_S1_clock_type(id__))))
				Clock_CLID_S0(id__,x__) = 
					TimeOut_1(
						S0::entered -> Clock_CLID_S0(id__,0)
						[]
						get_CLID_S0!x__ -> Clock_CLID_S0(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_S0(id__,clock_type_plus(x__,1,CLID_S0_clock_type(id__))))
				
				StateClocks(id__) = dbisim(Clock_CLID_S1(id__,0))
				[| { terminate } |] (
				dbisim(Clock_CLID_S0(id__,0))
				)
				
				stateClockSync = {|get_CLID_S1,S1::entered,get_CLID_S0,S0::entered|}
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
				}
		endmodule
		
		Timed(OneStep) {
				-- undefined operations
				CALL__op1(id__) 	= op1Call -> SKIP
				CALL__op2(id__) 	= op2Call -> SKIP
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = prioritise(	((
						stm0::D__(id__)[[
							stm0::terminate <- terminate,
							stm0::evOut <- evOut,
							stm0::op1Call <- op1Call,
							stm0::op2Call <- op2Call
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
				-- VS version
				VS__(id__) = prioritise(	((
						stm0::VS__(id__)[[
							stm0::terminate <- terminate,
							stm0::evOut <- evOut,
							stm0::op1Call <- op1Call,
							stm0::op2Call <- op2Call
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>)
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = dbisim(prioritise(	((
						stm0::O__(id__)[[
							stm0::terminate <- terminate,
							stm0::evOut <- evOut,
							stm0::op1Call <- op1Call,
							stm0::op2Call <- op2Call
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
								
				-- VS_O version
				VS_O__(id__) = dbisim(prioritise(	((
						stm0::VS_O__(id__)[[
							stm0::terminate <- terminate,
							stm0::evOut <- evOut,
							stm0::op1Call <- op1Call,
							stm0::op2Call <- op2Call
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				,<union(visibleMemoryEvents,{terminate}),{tock}>))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
		}

	endmodule
