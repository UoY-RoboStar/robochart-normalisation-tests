
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 23-10-2022 17:42:06
--
-- Iterated compression status: true
-- Assertions compression status: false
--

-- compileSelfContainedOperation
module OP_pkg515_main_waitOp
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_f|
	              NID_Waiting|
	              NID_i0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	f::enter,
	Waiting::enter,
	i0::enter
	|}
	
	enteredSS = 	{|
	f::entered,
	Waiting::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
		, share__
		|}
	datatype ClockSet = 
		CLID_C
	
	channel clockReset, clockResetL, clockResetR : ClockSet
	
	localClockResets = {|clockReset.CLID_C|}
	
	
	channel get_CLID_f : core_clock_type 
	channel get_CLID_Waiting : core_clock_type 
	channel get_CLID_C : core_clock_type 
	--channel increment__
	
	CLID_f_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Waiting_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_C_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	({param_i|param_i <- core_nat})
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	
	
		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Final state: f
		module f
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				D__(id__,
							param_i) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_i) = D__(id__,
							param_i)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Waiting
		module Waiting
		
		enterSS = 
				{|			i::enter,
					SEnd::enter
				|}
		enteredSS = 
				{|			SEnd::entered
				|}
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i|
			              NID_SEnd
			
			channel internal__ : NIDS
			
			channel get_CLID_SEnd : core_clock_type 
			--channel increment__
			
			CLID_SEnd_clock_type(id__) = 
				let
					max = (clock_type_max(Union({
			}))+1)
				ctype = {0..max}
			within
				if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
			
			
			--	Nodes
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i
			module i
			exports
			
				channel enter, interrupt
				
				Timed(OneStep) {
					D__(id__,
								param_i) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
								param_i) = D__(id__,
								param_i)
				}
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: SEnd
			module SEnd
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--channel increment__
				
				
				--	Nodes
				-- declaring all nodes
				
				
				Timed(OneStep) {
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
								param_i) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_i) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
					
					-- Clocks
					
					StateClocks(id__) = terminate -> SKIP
					
					stateClockSync = {||}
				}
			
			endmodule
			----------------------------------------------------------------------
			
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
							param_i) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
				
					Behaviour 	= dbisim(
						((
						 (((dbisim(
						 	sbisim(
						 		(let
						 			-- IMPLEMENTATION NOTE:
						 			-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						 			-- modules for defining the semantics of each node.
						 			enterSS = {|
						 			i::enter,
						 			SEnd::enter
						 			|}
						 			hideSet = union(enterSS,{|exit,exited,internal__|})
						 		within 
						 			((let
						 				-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						 				-- because CSPM modules are used for the semantics of Node.
						 				flowevts = union(enterSS,{|exit,exited,interrupt|})
						 				transSync = {|internal__.NID_i|}
						 			within
						 				((
						 				 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						 				   i::D__(id__,
						 				   			param_i)
						 				   [| { share__, terminate } |] (
						 				   SEnd::D__(id__,
						 				   			param_i)
						 				   )
						 				 )
						 				 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
						 				 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
						 				 )
						 				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 				 )
						 				 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 				|}) |]
						 				 ((i::enter -> Transitions(id__,
						 				 			param_i))
						 				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 				 )
						 				)
						 				)
						 			)
						 			 \ hideSet)
						 		)
						 		[| {|get_CLID_SEnd,SEnd::entered,terminate|} |]
						 		dbisim(Clock_CLID_SEnd(id__,0))
						 	)\{|get_CLID_SEnd|}
						 )
						 ))
						  [[ share__ <- x__ | x__ <- {| share__,clockResetR.CLID_C |} ]] 
						  [[clockReset.CLID_C <- clockResetL.CLID_C]]
						 )
						 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
						 			,clockResetL.CLID_C
						 			,clockResetR.CLID_C
						 			|}) |]
						 ((During)
						  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
						  [[clockReset.CLID_C <- clockResetR.CLID_C]]
						 )
						)[[clockResetL.CLID_C <- clockReset.CLID_C]]
						 [[clockResetR.CLID_C <- clockReset.CLID_C]]
						)\union(enteredSS,{terminate}) 
					)
					During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
							 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_i) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
				
					Behaviour 	= dbisim(
						((
						 (((dbisim(
						 	sbisim(
						 		(let
						 			-- IMPLEMENTATION NOTE:
						 			-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						 			-- modules for defining the semantics of each node.
						 			enterSS = {|
						 			i::enter,
						 			SEnd::enter
						 			|}
						 			hideSet = union(enterSS,{|exit,exited,internal__|})
						 		within 
						 			((let
						 				-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						 				-- because CSPM modules are used for the semantics of Node.
						 				flowevts = union(enterSS,{|exit,exited,interrupt|})
						 				transSync = {|internal__.NID_i|}
						 			within
						 				((
						 				 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						 				   i::VS_O__(id__,
						 				   			param_i)
						 				   [| { share__, terminate } |] (
						 				   SEnd::VS_O__(id__,
						 				   			param_i)
						 				   )
						 				 )
						 				 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
						 				 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
						 				 )
						 				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 				 )
						 				 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 				|}) |]
						 				 ((i::enter -> Transitions(id__,
						 				 			param_i))
						 				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 				 )
						 				)
						 				)
						 			)
						 			 \ hideSet)
						 		)
						 		[| {|get_CLID_SEnd,SEnd::entered,terminate|} |]
						 		dbisim(Clock_CLID_SEnd(id__,0))
						 	)\{|get_CLID_SEnd|}
						 )
						 ))
						  [[ share__ <- x__ | x__ <- {| share__,clockResetR.CLID_C |} ]] 
						  [[clockReset.CLID_C <- clockResetL.CLID_C]]
						 )
						 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
						 			,clockResetL.CLID_C
						 			,clockResetR.CLID_C
						 			|}) |]
						 ((During)
						  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
						  [[clockReset.CLID_C <- clockResetR.CLID_C]]
						 )
						)[[clockResetL.CLID_C <- clockReset.CLID_C]]
						 [[clockResetR.CLID_C <- clockReset.CLID_C]]
						)\{terminate} 
					)
					During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
							 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
				within
					Inactive [| {terminate} |> SKIP)
				
				Transitions(id__,
							param_i) = ((let
					Trans = TimeOut_1(
						 (share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; SEnd::enter -> SKIP))))
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
						 )
					,SKIP);Trans
				within
					Trans [|{terminate}|> SKIP
				)
				)
				
				
				-- Clocks
				Clock_CLID_SEnd(id__,x__) = 
					TimeOut_1(
						SEnd::entered -> Clock_CLID_SEnd(id__,0)
						[]
						get_CLID_SEnd!x__ -> Clock_CLID_SEnd(id__,x__)
						[]
						terminate -> SKIP,Clock_CLID_SEnd(id__,clock_type_plus(x__,1,CLID_SEnd_clock_type(id__))))
				
				StateClocks(id__) = dbisim(Clock_CLID_SEnd(id__,0))
				
				stateClockSync = {|get_CLID_SEnd,SEnd::entered|}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
							param_i) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
							param_i) = D__(id__,
							param_i)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__,
					param_i) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
		Stateful(id__,
					param_i) \ {terminate}
		
		STM_VS_O(id__,
					param_i) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
		Stateful(id__,
					param_i) \ {terminate}
		
		-- Transitions
		Transitions(id__,
					param_i) = ((let
			Trans = share__choice(get_CLID_C?C:CLID_C_clock_type(id__) -> TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim(((C==param_i))&(internal__!NID_Waiting -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f::enter -> SKIP)))
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(clockReset.CLID_C -> SKIP) ; Waiting::enter -> SKIP))))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
			)
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,
					param_i) = 
			dbisim((
			let
				finalNodesEntered = {|f::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					f::enter,
					Waiting::enter,
					i0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_Waiting,internal__.NID_i0|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   f::D__(id__,
						   			param_i)
						   [| { share__, terminate } |] (
						   Waiting::D__(id__,
						   			param_i)
						   [| { share__, terminate } |] (
						   i0::D__(id__,
						   			param_i)
						   )
						   )
						 )
						 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Waiting|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						  [[clockReset.CLID_C <- clockResetL.CLID_C]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,clockResetL.CLID_C
						|}) |]
						 ((i0::enter -> Transitions(id__,
						 			param_i))
						  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
						 )
						)[[clockResetL.CLID_C <- clockReset.CLID_C]]
						)
					)
					 \ hideSet)
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,
					param_i) = 
			dbisim((let
				stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
			 within
				(MachineBody(id__,
							param_i) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
			)
			)
		
		
		Stateful(id__,
					param_i) = 
			((let
				getsetLocalChannels = {||}
				clockSync = {|get_CLID_C,clockReset.CLID_C|}
			within
				(Behaviour(id__,
							param_i) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 			param_i) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		
		-- Visible counterparts
		MachineBody_VS_O(id__,
					param_i) = 
			dbisim((
			let
				finalNodesEntered = {|f::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					f::enter,
					Waiting::enter,
					i0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_Waiting,internal__.NID_i0|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   f::VS_O__(id__,
						   			param_i)
						   [| { share__, terminate } |] (
						   Waiting::VS_O__(id__,
						   			param_i)
						   [| { share__, terminate } |] (
						   i0::VS_O__(id__,
						   			param_i)
						   )
						   )
						 )
						 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Waiting|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						  [[clockReset.CLID_C <- clockResetL.CLID_C]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,clockResetL.CLID_C
						|}) |]
						 ((i0::enter -> Transitions(id__,
						 			param_i))
						  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
						 )
						)[[clockResetL.CLID_C <- clockReset.CLID_C]]
						)
					)
					 \ hideSet)
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,
					param_i) = 
			dbisim((let
				stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
			 within
				(MachineBody_VS_O(id__,
							param_i) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		
		Stateful_VS_O(id__,
					param_i) = 
			dbisim((let
				getsetLocalChannels = {||}
				clockSync = {|get_CLID_C,clockReset.CLID_C|}
			within
				(Behaviour_VS_O(id__,
							param_i) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 			param_i) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		
		-- END
		
		-- Memory
		-- Memory variables
		
		-- varMemory process
		varMemory(id__,
					param_i) = terminate -> SKIP
		
		getsetLocalChannels = {||}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,
					param_i) = STM_VS_O(id__,
					param_i) \ localClockResets
		D__(id__,
					param_i) = timed_priority(STM(id__,
					param_i) \ union(internal_events,localClockResets))
		O__(id__,
					param_i) = dbisim(D__(id__,
					param_i))
		VS__(id__,
					param_i) = FVS__(id__,
					param_i)
		VS_O__(id__,
					param_i) = dbisim(FVS__(id__,
					param_i))
		HEXT__(id__,
					param_i) = O__(id__,
					param_i) [|shared_variable_events|] SKIP
		FVS_C__(id__,
					param_i) = dbisim(timed_priority(STM(id__,
					param_i) \ internal_events))
		HUP__(id__,
					param_i) = timed_priority(O__(id__,
					param_i) [|{share__}|] SKIP)
		
		-- Clocks
		Clock_CLID_C(id__,x__) = 
			TimeOut_1(
				clockReset.CLID_C -> Clock_CLID_C(id__,0)
				[]
				get_CLID_C!x__ -> Clock_CLID_C(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_C(id__,clock_type_plus(x__,1,CLID_C_clock_type(id__))))
		
		Clocks(id__) = dbisim(Clock_CLID_C(id__,0))
		
		clockSync = {|get_CLID_C,clockReset.CLID_C|}
		
		Clock_CLID_Waiting(id__,x__) = 
			TimeOut_1(
				Waiting::entered -> Clock_CLID_Waiting(id__,0)
				[]
				get_CLID_Waiting!x__ -> Clock_CLID_Waiting(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_Waiting(id__,clock_type_plus(x__,1,CLID_Waiting_clock_type(id__))))
		
		StateClocks(id__) = dbisim(Clock_CLID_Waiting(id__,0))
		
		stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
		}
			endmodule
