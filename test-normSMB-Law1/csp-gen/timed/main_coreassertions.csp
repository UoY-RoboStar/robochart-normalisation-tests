
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 23-10-2022 17:43:19
--
-- Iterated compression status: true
-- Assertions compression status: false
--

include "main.csp"

-- generate main_STM
P_main_STM = let
	id__ = 0
	
	
	
within
	main::STM::O__(
		id__
	)
assert P_main_STM :[deadlock-free]	
assert P_main_STM;RUN({r__}) :[deadlock-free]
assert P_main_STM :[deterministic]
assert P_main_STM :[divergence-free]
-- timed deadlock free
assert prioritise(P_main_STM[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_main_STM


-- generate main_C1
P_main_C1 = let
	id__ = 0
	
	
	
		
within
	main::C1::O__(id__)

assert P_main_C1 :[deadlock-free]	
assert P_main_C1;RUN({r__}) :[deadlock-free]
assert P_main_C1 :[deterministic]
assert P_main_C1 :[divergence-free]

-- generate main_C1_stm0
P_main_C1_stm0 = let
	id__ = 0
	
	
	
within
	main::C1::stm0::O__(
		id__
	)
assert P_main_C1_stm0 :[deadlock-free]	
assert P_main_C1_stm0;RUN({r__}) :[deadlock-free]
assert P_main_C1_stm0 :[deterministic]
assert P_main_C1_stm0 :[divergence-free]
-- timed deadlock free
assert prioritise(P_main_C1_stm0[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_main_C1_stm0
-- timed deadlock free
assert prioritise(P_main_C1[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_main_C1

-- generate main_M
P_main_M = let
	id__ = 0
	
	
	
		
	
within
	main::M::O__(id__)
assert P_main_M :[deadlock-free]	
assert P_main_M;RUN({r__}) :[deadlock-free]
assert P_main_M :[deterministic]
assert P_main_M :[divergence-free]

-- generate main_M_c0
P_main_M_c0 = let
	id__ = 0
	
	
	
		
within
	main::M::c0::O__(id__)

assert P_main_M_c0 :[deadlock-free]	
assert P_main_M_c0;RUN({r__}) :[deadlock-free]
assert P_main_M_c0 :[deterministic]
assert P_main_M_c0 :[divergence-free]

-- timed deadlock free
assert prioritise(P_main_M_c0[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_main_M_c0
-- timed deadlock free
assert prioritise(P_main_M[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_main_M
