
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 23-10-2022 17:42:06
--
-- Iterated compression status: true
-- Assertions compression status: false
--

-- compileSelfContainedOperation
module OP_pkg515_main_deadlineCheck
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i|
	              NID_f
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	
	-- Declaring call and ret events for undefined operations
	channel tStopCall
	
	enterSS = {|
	i::enter,
	f::enter
	|}
	
	enteredSS = 	{|
	f::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	tStopCall
		, share__
		|}
	
	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i
	module i
	exports
	
		channel enter, interrupt
		
		D__(id__,
					param_d) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__,
					param_d) = D__(id__,
					param_d)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Final state: f
	module f
	
	exports
	
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
		--	Rule: behaviours(Node)
		D__(id__,
					param_d) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
				
				Entering 	= entered -> SKIP ; Active
				Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
				Interrupted	= share__choice(exit -> exited -> Inactive)
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
					param_d) = D__(id__,
					param_d)
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	CALL__tStop(id__) 	= tStopCall -> SKIP
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__,
				param_d) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__,
				param_d) \ {terminate}
	
	STM_VS_O(id__,
				param_d) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__,
				param_d) \ {terminate}
	
	-- Transitions
	Transitions(id__,
				param_d) = ((let
		Trans = (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((true&CALL__tStop(
			 			id__
			 		) ; f::enter -> SKIP))))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__,
				param_d) = 
		dbisim((
		let
			finalNodesEntered = {|f::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i::enter,
				f::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i::D__(id__,
					   			param_d)
					   [| { share__, terminate } |] (
					   f::D__(id__,
					   			param_d)
					   )
					 )
					 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i::enter -> Transitions(id__,
					 			param_d))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__,
				param_d) = 
		dbisim((MachineBody(id__,
					param_d)\ enteredSS)
		)
	
	
	Stateful(id__,
				param_d) = 
		((
			(Behaviour(id__,
						param_d) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
						param_d))
		 	\getsetLocalChannels
		)
		)
	
	
	-- Visible counterparts
	MachineBody_VS_O(id__,
				param_d) = 
		dbisim((
		let
			finalNodesEntered = {|f::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i::enter,
				f::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i::VS_O__(id__,
					   			param_d)
					   [| { share__, terminate } |] (
					   f::VS_O__(id__,
					   			param_d)
					   )
					 )
					 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i::enter -> Transitions(id__,
					 			param_d))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__,
				param_d) = 
		dbisim((MachineBody_VS_O(id__,
					param_d))
		)
	
	
	Stateful_VS_O(id__,
				param_d) = 
		dbisim((
			(Behaviour_VS_O(id__,
						param_d) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
						param_d))
		 	\getsetLocalChannels
		)
		)
	
	
	-- END
	
	-- Memory
	-- Memory variables
	
	-- varMemory process
	varMemory(id__,
				param_d) = terminate -> SKIP
	
	getsetLocalChannels = {||}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__,
				param_d) = STM_VS_O(id__,
				param_d)
	
	D__(id__,
				param_d) = STM(id__,
				param_d) \ internal_events
	O__(id__,
				param_d) = sbisim(diamond(D__(id__,
				param_d)))
	VS__(id__,
				param_d) = FVS__(id__,
				param_d)
	VS_O__(id__,
				param_d) = sbisim(diamond(FVS__(id__,
				param_d)))
	HEXT__(id__,
				param_d) = O__(id__,
				param_d) [|shared_variable_events|] SKIP
	HUP__(id__,
				param_d) = O__(id__,
				param_d) [|{share__}|] SKIP
			endmodule
