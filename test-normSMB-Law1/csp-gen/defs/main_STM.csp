
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 23-10-2022 17:43:19
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module main_STM
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i|
	              NID_S1|
	              NID_S0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_x, set_x, setL_x, setR_x: core_nat
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel evOut__: NIDS.InOut
	channel evOut: InOut
	
	-- Declaring call and ret events for undefined operations
	channel op2Call
	channel op1Call
	
	enterSS = {|
	i::enter,
	S1::enter,
	S0::enter
	|}
	
	enteredSS = 	{|
	S1::entered,
	S0::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	evOut
	,	op2Call,
		op1Call
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i
	module i
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: S1
	module S1
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP;share__choice(true & (share__choice(set_x!1 -> SKIP)));SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; true&CALL__op1(
					 	  			id__
					 	  		) ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((true&CALL__op1(
						id__
					);true&CALL__op2(
						id__
					) ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP;share__choice(true & (share__choice(set_x!1 -> SKIP)));SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; true&CALL__op1(
					 	  			id__
					 	  		) ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((true&CALL__op1(
						id__
					);true&CALL__op2(
						id__
					) ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: S0
	module S0
	
	enterSS = 
			{|			iS0::enter,
				S0::enter
			|}
	enteredSS = 
			{|			S0::entered
			|}
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		-- declaring identifiers of transitions
		datatype NIDS = 
		              NID_iS0|
		              NID_S0
		
		channel internal__ : NIDS
		channel evOut__: NIDS.InOut
		
		--	Nodes
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: iS0
		module iS0
		exports
		
			channel enter, interrupt
			
			D__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(interrupt -> SKIP) ; Inactive
				within
					Inactive [| {terminate} |> SKIP)
			
			VS_O__(id__) = D__(id__)
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: S0
		module S0
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--	Nodes
			-- declaring all nodes
			
			
			--	Rule: behaviours(Node)
			--  Note that FDR has problems with efficiently compiling the process below
			-- 	if using a different recursion pattern.
			D__(id__) = 
			dbisim(let
				-- IMPLEMENTATION NOTE: 
				-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
				-- however FDR struggles with that form in certain cases. So we use the exception operator
				-- instead to 'terminate'.
				
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= SKIP;SKIP;true&CALL__op2(
							id__
						) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; true&CALL__op1(
						 	  			id__
						 	  		);true&CALL__op2(
						 	  			id__
						 	  		) ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((true&CALL__op1(
							id__
						) ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
				
			VS_O__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= SKIP;SKIP;true&CALL__op2(
							id__
						) ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; true&CALL__op1(
						 	  			id__
						 	  		);true&CALL__op2(
						 	  			id__
						 	  		) ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((true&CALL__op1(
							id__
						) ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
			
		
		endmodule
		----------------------------------------------------------------------
		
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__op1(
						id__
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; true&CALL__op1(
					 	  			id__
					 	  		) ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
		
			Behaviour 	= dbisim(
				((
				 (((let
				 	-- IMPLEMENTATION NOTE:
				 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				 	-- modules for defining the semantics of each node.
				 	enterSS = {|
				 	iS0::enter,
				 	S0::enter
				 	|}
				 	hideSet = union(enterSS,{|exit,exited,internal__|})
				 within 
				 	((let
				 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
				 		-- because CSPM modules are used for the semantics of Node.
				 		flowevts = union(enterSS,{|exit,exited,interrupt|})
				 		transSync = {|internal__.NID_iS0|}
				 	within
				 		((
				 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
				 		   iS0::D__(id__)
				 		   [| { share__, terminate } |] (
				 		   S0::D__(id__)
				 		   )
				 		 )
				 		 [[S0::interrupt <- x__ | x__ <- {|interrupt|}]]
				 		 [[iS0::interrupt <- x__ | x__ <- {|internal__.NID_iS0|}]]
				 		 )
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 		 )
				 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
				 		|}) |]
				 		 ((iS0::enter -> Transitions(id__))
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
				 		 )
				 		)
				 		)
				 	)
				 	 \ hideSet)
				 	[[
				 		evOut__.x____ <- evOut
				 		| x____ <- NIDS
				 	]]
				 )
				 )
				  [[ share__ <- x__ | x__ <- {| share__,setR_x |} ]] 
				  [[set_x <- setL_x]]
				 )
				 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
				 			,setL_x
				 			,setR_x
				 			|}) |]
				 ((During)
				  [[ share__ <- x__ | x__ <- {| share__,setL_x |} ]]
				  [[set_x <- setR_x]]
				 )
				)[[setL_x <- set_x]]
				 [[setR_x <- set_x]]
				)\union(enteredSS,{terminate}) 
			)
			During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
					 	  ; entered -> ((CRUN(enteredSS) ||| share__choice(get_x?x -> true&(if (x==1) then (SKIP) else (SKIP)));SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__op1(
						id__
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; true&CALL__op1(
					 	  			id__
					 	  		) ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
		
			Behaviour 	= dbisim(
				((
				 (((let
				 	-- IMPLEMENTATION NOTE:
				 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				 	-- modules for defining the semantics of each node.
				 	enterSS = {|
				 	iS0::enter,
				 	S0::enter
				 	|}
				 	hideSet = union(enterSS,{|exit,exited,internal__|})
				 within 
				 	((let
				 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
				 		-- because CSPM modules are used for the semantics of Node.
				 		flowevts = union(enterSS,{|exit,exited,interrupt|})
				 		transSync = {|internal__.NID_iS0|}
				 	within
				 		((
				 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
				 		   iS0::VS_O__(id__)
				 		   [| { share__, terminate } |] (
				 		   S0::VS_O__(id__)
				 		   )
				 		 )
				 		 [[S0::interrupt <- x__ | x__ <- {|interrupt|}]]
				 		 [[iS0::interrupt <- x__ | x__ <- {|internal__.NID_iS0|}]]
				 		 )
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 		 )
				 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
				 		|}) |]
				 		 ((iS0::enter -> Transitions(id__))
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
				 		 )
				 		)
				 		)
				 	)
				 	 \ hideSet)
				 	[[
				 		evOut__.x____ <- evOut
				 		| x____ <- NIDS
				 	]]
				 )
				 )
				  [[ share__ <- x__ | x__ <- {| share__,setR_x |} ]] 
				  [[set_x <- setL_x]]
				 )
				 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
				 			,setL_x
				 			,setR_x
				 			|}) |]
				 ((During)
				  [[ share__ <- x__ | x__ <- {| share__,setL_x |} ]]
				  [[set_x <- setR_x]]
				 )
				)[[setL_x <- set_x]]
				 [[setR_x <- set_x]]
				)\{terminate} 
			)
			During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
					 	  ; entered -> ((CRUN(enteredSS) ||| share__choice(get_x?x -> true&(if (x==1) then (SKIP) else (SKIP)));SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
		within
			Inactive [| {terminate} |> SKIP)
		
		Transitions(id__) = ((let
			Trans = (
				((share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_iS0 -> SKIP ;  ((SKIP ; S0::enter -> SKIP))))
				 ) ; Trans)
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
			)
		within
			Trans
		)
		)
		
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	CALL__op2(id__) 	= op2Call -> SKIP
	CALL__op1(id__) 	= op1Call -> SKIP
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__) = ((let
		Trans = (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP;true&(share__choice(evOut.out -> SKIP)) ; S0::enter -> SKIP))))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i::enter,
				S1::enter,
				S0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i::D__(id__)
					   [| { share__, terminate } |] (
					   S1::D__(id__)
					   [| { share__, terminate } |] (
					   S0::D__(id__)
					   )
					   )
					 )
					 [[S1::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[S0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
				[[
					evOut__.x____ <- evOut
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	IteratedBehaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	Stateful(id__) = 
		((
			(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__) =
		(dbisim(
			sbisim(
				Behaviour(id__)
				[| {|get_x,set_x,terminate|} |]
				Memory_x(1)
			)\{|get_x,set_x|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i::enter,
				S1::enter,
				S0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i::VS_O__(id__)
					   [| { share__, terminate } |] (
					   S1::VS_O__(id__)
					   [| { share__, terminate } |] (
					   S0::VS_O__(id__)
					   )
					   )
					 )
					 [[S1::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[S0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
				[[
					evOut__.x____ <- evOut
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	IteratedBehaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	Stateful_VS_O(id__) = 
		dbisim((
			(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__) =
		(dbisim(
			sbisim(
				Behaviour_VS_O(id__)
				[| {|get_x,set_x,terminate|} |]
				Memory_x(1)
			)\{|get_x,set_x|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_x(x) =
		get_x!x -> Memory_x(x)
		[]
		set_x?x__ -> Memory_x(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__) = Memory_x(1)
	
	getsetLocalChannels = {|get_x,set_x|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__) = STM_VS_O(id__)
	
	D__(id__) = STM(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = FVS__(id__)
	VS_O__(id__) = sbisim(diamond(FVS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
	HUP__(id__) = O__(id__) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	
	-- sharedVarMemory process
	sharedVarMemory(id__) = terminate -> SKIP
	
	sharedVarSync = {||}
	
	sharedVarHide = {||}
endmodule
