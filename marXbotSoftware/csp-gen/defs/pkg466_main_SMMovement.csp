
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 28-09-2022 20:22:28
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module pkg466_main_SMMovement
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_Moving|
	              NID_Turning
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel obstacle__: NIDS.InOut
	channel obstacle: InOut
	
	-- Declaring call and ret events for undefined operations
	channel normal_SMMovement_Moving_entryCall
	channel moveCall: core_real.core_real
	
	enterSS = {|
	i0::enter,
	Moving::enter,
	Turning::enter
	|}
	
	enteredSS = 	{|
	Moving::entered,
	Turning::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	obstacle
	,	normal_SMMovement_Moving_entryCall,
		moveCall
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI) = D__(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Moving
	module Moving
	
	enterSS = 
			{|			i::enter,
				SEnd::enter
			|}
	enteredSS = 
			{|			SEnd::entered
			|}
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		-- declaring identifiers of transitions
		datatype NIDS = 
		              NID_i|
		              NID_SEnd
		
		channel internal__ : NIDS
		channel obstacle__: NIDS.InOut
		
		--	Nodes
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i
		module i
		exports
		
			channel enter, interrupt
			
			D__(id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(interrupt -> SKIP) ; Inactive
				within
					Inactive [| {terminate} |> SKIP)
			
			VS_O__(id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI) = D__(id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI)
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: SEnd
		module SEnd
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--	Nodes
			-- declaring all nodes
			
			
			--	Rule: behaviours(Node)
			--  Note that FDR has problems with efficiently compiling the process below
			-- 	if using a different recursion pattern.
			D__(id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI) = 
			dbisim(let
				-- IMPLEMENTATION NOTE: 
				-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
				-- however FDR struggles with that form in certain cases. So we use the exception operator
				-- instead to 'terminate'.
				
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= SKIP ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
				
			VS_O__(id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= SKIP ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
			
		
		endmodule
		----------------------------------------------------------------------
		
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__normal_SMMovement_Moving_entry(
						id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
		
			Behaviour 	= dbisim(
				((
				 (((let
				 	-- IMPLEMENTATION NOTE:
				 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				 	-- modules for defining the semantics of each node.
				 	enterSS = {|
				 	i::enter,
				 	SEnd::enter
				 	|}
				 	hideSet = union(enterSS,{|exit,exited,internal__|})
				 within 
				 	((let
				 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
				 		-- because CSPM modules are used for the semantics of Node.
				 		flowevts = union(enterSS,{|exit,exited,interrupt|})
				 		transSync = {|internal__.NID_i|}
				 	within
				 		((
				 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
				 		   i::D__(id__,
				 		   		    const_pkg466_main_SMMovement_lvel,
				 		   		    const_pkg466_main_SMMovement_avel,
				 		   		    const_pkg466_main_SMMovement_PI)
				 		   [| { share__, terminate } |] (
				 		   SEnd::D__(id__,
				 		   		    const_pkg466_main_SMMovement_lvel,
				 		   		    const_pkg466_main_SMMovement_avel,
				 		   		    const_pkg466_main_SMMovement_PI)
				 		   )
				 		 )
				 		 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
				 		 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
				 		 )
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 		 )
				 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
				 		|}) |]
				 		 ((i::enter -> Transitions(id__,
				 		 		    const_pkg466_main_SMMovement_lvel,
				 		 		    const_pkg466_main_SMMovement_avel,
				 		 		    const_pkg466_main_SMMovement_PI))
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
				 		 )
				 		)
				 		)
				 	)
				 	 \ hideSet)
				 	[[
				 		obstacle__.x____ <- obstacle
				 		| x____ <- NIDS
				 	]]
				 )
				 )
				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 )
				 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
				|}) |]
				 ((During)
				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
				 )
				)
				)\union(enteredSS,{terminate}) 
			)
			During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
					 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__normal_SMMovement_Moving_entry(
						id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
		
			Behaviour 	= dbisim(
				((
				 (((let
				 	-- IMPLEMENTATION NOTE:
				 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				 	-- modules for defining the semantics of each node.
				 	enterSS = {|
				 	i::enter,
				 	SEnd::enter
				 	|}
				 	hideSet = union(enterSS,{|exit,exited,internal__|})
				 within 
				 	((let
				 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
				 		-- because CSPM modules are used for the semantics of Node.
				 		flowevts = union(enterSS,{|exit,exited,interrupt|})
				 		transSync = {|internal__.NID_i|}
				 	within
				 		((
				 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
				 		   i::VS_O__(id__,
				 		   		    const_pkg466_main_SMMovement_lvel,
				 		   		    const_pkg466_main_SMMovement_avel,
				 		   		    const_pkg466_main_SMMovement_PI)
				 		   [| { share__, terminate } |] (
				 		   SEnd::VS_O__(id__,
				 		   		    const_pkg466_main_SMMovement_lvel,
				 		   		    const_pkg466_main_SMMovement_avel,
				 		   		    const_pkg466_main_SMMovement_PI)
				 		   )
				 		 )
				 		 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
				 		 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
				 		 )
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 		 )
				 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
				 		|}) |]
				 		 ((i::enter -> Transitions(id__,
				 		 		    const_pkg466_main_SMMovement_lvel,
				 		 		    const_pkg466_main_SMMovement_avel,
				 		 		    const_pkg466_main_SMMovement_PI))
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
				 		 )
				 		)
				 		)
				 	)
				 	 \ hideSet)
				 	[[
				 		obstacle__.x____ <- obstacle
				 		| x____ <- NIDS
				 	]]
				 )
				 )
				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 )
				 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
				|}) |]
				 ((During)
				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
				 )
				)
				)\{terminate} 
			)
			During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
					 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
		within
			Inactive [| {terminate} |> SKIP)
		
		Transitions(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI) = ((let
			Trans = (
				((share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; SEnd::enter -> SKIP))))
				 ) ; Trans)
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
			)
		within
			Trans
		)
		)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Turning
	module Turning
	
	enterSS = 
			{|			SEnd::enter,
				i::enter
			|}
	enteredSS = 
			{|			SEnd::entered
			|}
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		-- declaring identifiers of transitions
		datatype NIDS = 
		              NID_SEnd|
		              NID_i
		
		channel internal__ : NIDS
		channel obstacle__: NIDS.InOut
		
		--	Nodes
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- State: SEnd
		module SEnd
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--	Nodes
			-- declaring all nodes
			
			
			--	Rule: behaviours(Node)
			--  Note that FDR has problems with efficiently compiling the process below
			-- 	if using a different recursion pattern.
			D__(id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI) = 
			dbisim(let
				-- IMPLEMENTATION NOTE: 
				-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
				-- however FDR struggles with that form in certain cases. So we use the exception operator
				-- instead to 'terminate'.
				
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= SKIP ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
				
			VS_O__(id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= SKIP ; 
						 	  Behaviour ; 
						 	  share__choice(exit -> SKIP) ; SKIP ; 
						 	  share__choice(exited -> SKIP) ; Inactive
			
				Behaviour 	= entered -> During
				During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
			within
				Inactive [| {terminate} |> SKIP)
			
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Initial: i
		module i
		exports
		
			channel enter, interrupt
			
			D__(id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(interrupt -> SKIP) ; Inactive
				within
					Inactive [| {terminate} |> SKIP)
			
			VS_O__(id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI) = D__(id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI)
		
		endmodule
		----------------------------------------------------------------------
		
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__move(
						id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI,
						0,
						const_pkg466_main_SMMovement_avel
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
		
			Behaviour 	= dbisim(
				((
				 (((let
				 	-- IMPLEMENTATION NOTE:
				 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				 	-- modules for defining the semantics of each node.
				 	enterSS = {|
				 	SEnd::enter,
				 	i::enter
				 	|}
				 	hideSet = union(enterSS,{|exit,exited,internal__|})
				 within 
				 	((let
				 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
				 		-- because CSPM modules are used for the semantics of Node.
				 		flowevts = union(enterSS,{|exit,exited,interrupt|})
				 		transSync = {|internal__.NID_i|}
				 	within
				 		((
				 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
				 		   SEnd::D__(id__,
				 		   		    const_pkg466_main_SMMovement_lvel,
				 		   		    const_pkg466_main_SMMovement_avel,
				 		   		    const_pkg466_main_SMMovement_PI)
				 		   [| { share__, terminate } |] (
				 		   i::D__(id__,
				 		   		    const_pkg466_main_SMMovement_lvel,
				 		   		    const_pkg466_main_SMMovement_avel,
				 		   		    const_pkg466_main_SMMovement_PI)
				 		   )
				 		 )
				 		 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
				 		 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
				 		 )
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 		 )
				 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
				 		|}) |]
				 		 ((i::enter -> Transitions(id__,
				 		 		    const_pkg466_main_SMMovement_lvel,
				 		 		    const_pkg466_main_SMMovement_avel,
				 		 		    const_pkg466_main_SMMovement_PI))
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
				 		 )
				 		)
				 		)
				 	)
				 	 \ hideSet)
				 	[[
				 		obstacle__.x____ <- obstacle
				 		| x____ <- NIDS
				 	]]
				 )
				 )
				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 )
				 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
				|}) |]
				 ((During)
				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
				 )
				)
				)\union(enteredSS,{terminate}) 
			)
			During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
					 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__move(
						id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI,
						0,
						const_pkg466_main_SMMovement_avel
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
		
			Behaviour 	= dbisim(
				((
				 (((let
				 	-- IMPLEMENTATION NOTE:
				 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				 	-- modules for defining the semantics of each node.
				 	enterSS = {|
				 	SEnd::enter,
				 	i::enter
				 	|}
				 	hideSet = union(enterSS,{|exit,exited,internal__|})
				 within 
				 	((let
				 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
				 		-- because CSPM modules are used for the semantics of Node.
				 		flowevts = union(enterSS,{|exit,exited,interrupt|})
				 		transSync = {|internal__.NID_i|}
				 	within
				 		((
				 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
				 		   SEnd::VS_O__(id__,
				 		   		    const_pkg466_main_SMMovement_lvel,
				 		   		    const_pkg466_main_SMMovement_avel,
				 		   		    const_pkg466_main_SMMovement_PI)
				 		   [| { share__, terminate } |] (
				 		   i::VS_O__(id__,
				 		   		    const_pkg466_main_SMMovement_lvel,
				 		   		    const_pkg466_main_SMMovement_avel,
				 		   		    const_pkg466_main_SMMovement_PI)
				 		   )
				 		 )
				 		 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
				 		 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
				 		 )
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 		 )
				 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
				 		|}) |]
				 		 ((i::enter -> Transitions(id__,
				 		 		    const_pkg466_main_SMMovement_lvel,
				 		 		    const_pkg466_main_SMMovement_avel,
				 		 		    const_pkg466_main_SMMovement_PI))
				 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
				 		 )
				 		)
				 		)
				 	)
				 	 \ hideSet)
				 	[[
				 		obstacle__.x____ <- obstacle
				 		| x____ <- NIDS
				 	]]
				 )
				 )
				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
				 )
				 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
				|}) |]
				 ((During)
				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
				 )
				)
				)\{terminate} 
			)
			During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
					 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
		within
			Inactive [| {terminate} |> SKIP)
		
		Transitions(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI) = ((let
			Trans = (
				((share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; SEnd::enter -> SKIP))))
				 ) ; Trans)
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
			)
		within
			Trans
		)
		)
		
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	CALL__normal_SMMovement_Moving_entry(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) 	= normal_SMMovement_Moving_entryCall -> SKIP
	CALL__move(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI,
				param_lv,
				param_av) 	= moveCall.param_lv.param_av -> SKIP
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI))
	)\sharedVarHide
	
	STM_VS_O(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = ((let
		Trans = (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Moving::enter -> SKIP))))
			 	 [] dbisim((true)&(obstacle__!NID_Moving.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Turning::enter -> SKIP)))
			 	 [] dbisim((true)&(internal__!NID_Turning -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Moving::enter -> SKIP)))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				Moving::enter,
				Turning::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,obstacle__.NID_Moving.in,internal__.NID_Turning|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::D__(id__,
					   		    const_pkg466_main_SMMovement_lvel,
					   		    const_pkg466_main_SMMovement_avel,
					   		    const_pkg466_main_SMMovement_PI)
					   [| { share__, terminate } |] (
					   Moving::D__(id__,
					   		    const_pkg466_main_SMMovement_lvel,
					   		    const_pkg466_main_SMMovement_avel,
					   		    const_pkg466_main_SMMovement_PI)
					   [| { share__, terminate } |] (
					   Turning::D__(id__,
					   		    const_pkg466_main_SMMovement_lvel,
					   		    const_pkg466_main_SMMovement_avel,
					   		    const_pkg466_main_SMMovement_PI)
					   )
					   )
					 )
					 [[Moving::interrupt <- x__ | x__ <- {|interrupt,obstacle__.NID_Moving.in|}]]
					 [[Turning::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Turning|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i0::enter -> Transitions(id__,
					 		    const_pkg466_main_SMMovement_lvel,
					 		    const_pkg466_main_SMMovement_avel,
					 		    const_pkg466_main_SMMovement_PI))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
				[[
					obstacle__.x____ <- obstacle
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = 
		dbisim((MachineBody(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI)\ enteredSS)
		)
	
	IteratedBehaviour(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = 
		dbisim((MachineBody(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI)\ enteredSS)
		)
	
	Stateful(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = 
		((
			(Behaviour(id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) =
		(Behaviour(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI))
	
	-- Visible counterparts
	MachineBody_VS_O(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				Moving::enter,
				Turning::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,obstacle__.NID_Moving.in,internal__.NID_Turning|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::VS_O__(id__,
					   		    const_pkg466_main_SMMovement_lvel,
					   		    const_pkg466_main_SMMovement_avel,
					   		    const_pkg466_main_SMMovement_PI)
					   [| { share__, terminate } |] (
					   Moving::VS_O__(id__,
					   		    const_pkg466_main_SMMovement_lvel,
					   		    const_pkg466_main_SMMovement_avel,
					   		    const_pkg466_main_SMMovement_PI)
					   [| { share__, terminate } |] (
					   Turning::VS_O__(id__,
					   		    const_pkg466_main_SMMovement_lvel,
					   		    const_pkg466_main_SMMovement_avel,
					   		    const_pkg466_main_SMMovement_PI)
					   )
					   )
					 )
					 [[Moving::interrupt <- x__ | x__ <- {|interrupt,obstacle__.NID_Moving.in|}]]
					 [[Turning::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Turning|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i0::enter -> Transitions(id__,
					 		    const_pkg466_main_SMMovement_lvel,
					 		    const_pkg466_main_SMMovement_avel,
					 		    const_pkg466_main_SMMovement_PI))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
				[[
					obstacle__.x____ <- obstacle
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = 
		dbisim((MachineBody_VS_O(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI))
		)
	
	IteratedBehaviour_VS_O(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = 
		dbisim((MachineBody_VS_O(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI))
		)
	
	Stateful_VS_O(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = 
		dbisim((
			(Behaviour_VS_O(id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
					    const_pkg466_main_SMMovement_lvel,
					    const_pkg466_main_SMMovement_avel,
					    const_pkg466_main_SMMovement_PI))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) =
		(Behaviour_VS_O(id__,
				    const_pkg466_main_SMMovement_lvel,
				    const_pkg466_main_SMMovement_avel,
				    const_pkg466_main_SMMovement_PI))
	
	-- END
	
	-- Memory
	-- Memory variables
	
	-- varMemory process
	varMemory(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = terminate -> SKIP
	
	getsetLocalChannels = {||}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = STM_VS_O(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI)
	
	D__(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = STM(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) \ internal_events
	O__(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = sbisim(diamond(D__(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI)))
	VS__(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = FVS__(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI)
	VS_O__(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = sbisim(diamond(FVS__(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI)))
	HEXT__(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = O__(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) [|shared_variable_events|] SKIP
	HUP__(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = O__(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	
	-- sharedVarMemory process
	sharedVarMemory(id__,
			    const_pkg466_main_SMMovement_lvel,
			    const_pkg466_main_SMMovement_avel,
			    const_pkg466_main_SMMovement_PI) = terminate -> SKIP
	
	sharedVarSync = {||}
	
	sharedVarHide = {||}
endmodule
