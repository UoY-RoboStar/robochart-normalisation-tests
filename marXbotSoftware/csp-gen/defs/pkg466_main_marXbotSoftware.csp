
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 28-09-2022 20:22:29
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module pkg466_main_marXbotSoftware
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel obstacle: InOut
	
	channel moveCall: core_real.core_real
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	
	-- channel set with all visible events
	sem__events = {|
		obstacle
	,	moveCall
	|}
	
	-- declaring controller
		module ctrl_ref0
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel obstacle: InOut
			
			
			
			-- declaring call and ret events for undefined operations
			channel moveCall: core_real.core_real
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	obstacle
			,	moveCall
			|}
	
			-- defined operations
			-- compileOperationDef
			module OP_normal_SMMovement_Moving_entry
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i|
				              NID_f|
				              NID_t_j_2_2
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				channel moveCall: core_real.core_real
				
				enterSS = {|
				i::enter,
				f::enter,
				t_j_2_2::enter
				|}
				
				enteredSS = 	{|
				f::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	moveCall
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					D__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = D__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = D__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: t_j_2_2
				module t_j_2_2
				exports
				
					channel enter, interrupt
					
					D__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = D__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				CALL__move(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel,
							param_lv,
							param_av) 	= moveCall.param_lv.param_av -> SKIP
				
				CALL__waitOp(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel,
							param_i) = (OP_waitOp::O__(id__,
							param_i))
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) \ {terminate}
				
				STM_VS_O(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) \ {terminate}
				
				-- Transitions
				Transitions(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((true&CALL__move(
						 			id__,
						 		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel,
						 			const_pkg466_main_normal_SMMovement_Moving_entry_lvel,
						 			0
						 		) ; t_j_2_2::enter -> SKIP))))
						 	 [] dbisim((true)&(internal__!NID_t_j_2_2 -> SKIP ;  ((true&CALL__waitOp(
						 			id__,
						 		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel,
						 			1
						 		) ; f::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter,
							t_j_2_2::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_t_j_2_2|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::D__(id__,
								   		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
								   [| { share__, terminate } |] (
								   f::D__(id__,
								   		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
								   [| { share__, terminate } |] (
								   t_j_2_2::D__(id__,
								   		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 [[t_j_2_2::interrupt <- x__ | x__ <- {|internal__.NID_t_j_2_2|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__,
								 		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
					dbisim((MachineBody(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)\ enteredSS)
					)
				
				
				Stateful(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
					((
						(Behaviour(id__,
								    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								    const_pkg466_main_normal_SMMovement_Moving_entry_lvel))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i::enter,
							f::enter,
							t_j_2_2::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_t_j_2_2|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i::VS_O__(id__,
								   		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__,
								   		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
								   [| { share__, terminate } |] (
								   t_j_2_2::VS_O__(id__,
								   		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 [[t_j_2_2::interrupt <- x__ | x__ <- {|internal__.NID_t_j_2_2|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__,
								 		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
					dbisim((MachineBody_VS_O(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel))
					)
				
				
				Stateful_VS_O(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
					dbisim((
						(Behaviour_VS_O(id__,
								    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								    const_pkg466_main_normal_SMMovement_Moving_entry_lvel))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = STM_VS_O(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
				
				D__(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = STM(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) \ internal_events
				O__(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = sbisim(diamond(D__(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)))
				VS__(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = FVS__(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
				VS_O__(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = sbisim(diamond(FVS__(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)))
				HEXT__(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = O__(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) [|shared_variable_events|] SKIP
				HUP__(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = O__(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) [|{share__}|] SKIP
						endmodule
			-- compileOperationDef
			module OP_tStop
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_sStop|
				              NID_i
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				sStop::enter,
				i::enter
				|}
				
				enteredSS = 	{|
				sStop::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- State: sStop
				module sStop
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; sStop::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							sStop::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   sStop::D__(id__)
								   [| { share__, terminate } |] (
								   i::D__(id__)
								   )
								 )
								 [[sStop::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							sStop::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   sStop::VS_O__(id__)
								   [| { share__, terminate } |] (
								   i::VS_O__(id__)
								   )
								 )
								 [[sStop::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
						endmodule
			-- compileOperationDef
			module OP_deadlineCheck
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_f|
				              NID_i
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				f::enter,
				i::enter
				|}
				
				enteredSS = 	{|
				f::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__,
								param_d) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_d) = D__(id__,
								param_d)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_d) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
								param_d) = D__(id__,
								param_d)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__tStop(id__) = (OP_tStop::O__(id__))
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
							param_d) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_d) \ {terminate}
				
				STM_VS_O(id__,
							param_d) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_d) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							param_d) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((true&CALL__tStop(
						 			id__
						 		) ; f::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							param_d) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::D__(id__,
								   			param_d)
								   [| { share__, terminate } |] (
								   i::D__(id__,
								   			param_d)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__,
								 			param_d))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							param_d) = 
					dbisim((MachineBody(id__,
								param_d)\ enteredSS)
					)
				
				
				Stateful(id__,
							param_d) = 
					((
						(Behaviour(id__,
									param_d) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_d))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							param_d) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::VS_O__(id__,
								   			param_d)
								   [| { share__, terminate } |] (
								   i::VS_O__(id__,
								   			param_d)
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__,
								 			param_d))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							param_d) = 
					dbisim((MachineBody_VS_O(id__,
								param_d))
					)
				
				
				Stateful_VS_O(id__,
							param_d) = 
					dbisim((
						(Behaviour_VS_O(id__,
									param_d) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_d))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							param_d) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							param_d) = STM_VS_O(id__,
							param_d)
				
				D__(id__,
							param_d) = STM(id__,
							param_d) \ internal_events
				O__(id__,
							param_d) = sbisim(diamond(D__(id__,
							param_d)))
				VS__(id__,
							param_d) = FVS__(id__,
							param_d)
				VS_O__(id__,
							param_d) = sbisim(diamond(FVS__(id__,
							param_d)))
				HEXT__(id__,
							param_d) = O__(id__,
							param_d) [|shared_variable_events|] SKIP
				HUP__(id__,
							param_d) = O__(id__,
							param_d) [|{share__}|] SKIP
						endmodule
			-- compileOperationDef
			module OP_waitOp
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_Waiting|
				              NID_f|
				              NID_i0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				Waiting::enter,
				f::enter,
				i0::enter
				|}
				
				enteredSS = 	{|
				Waiting::entered,
				f::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- State: Waiting
				module Waiting
				
				enterSS = 
						{|			i::enter,
							SEnd::enter
						|}
				enteredSS = 
						{|			SEnd::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i|
					              NID_SEnd
					
					channel internal__ : NIDS
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i
					module i
					exports
					
						channel enter, interrupt
						
						D__(id__,
									param_i) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
									param_i) = D__(id__,
									param_i)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: SEnd
					module SEnd
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
									param_i) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
									param_i) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
								param_i) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i::enter,
							 	SEnd::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i::D__(id__,
							 		   			param_i)
							 		   [| { share__, terminate } |] (
							 		   SEnd::D__(id__,
							 		   			param_i)
							 		   )
							 		 )
							 		 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		|}) |]
							 		 ((i::enter -> Transitions(id__,
							 		 			param_i))
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 		 )
							 		)
							 		)
							 	)
							 	 \ hideSet)
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_i) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i::enter,
							 	SEnd::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i::VS_O__(id__,
							 		   			param_i)
							 		   [| { share__, terminate } |] (
							 		   SEnd::VS_O__(id__,
							 		   			param_i)
							 		   )
							 		 )
							 		 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		|}) |]
							 		 ((i::enter -> Transitions(id__,
							 		 			param_i))
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 		 )
							 		)
							 		)
							 	)
							 	 \ hideSet)
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__,
								param_i) = ((let
						Trans = (
							((share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; SEnd::enter -> SKIP))))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__,
								param_i) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_i) = D__(id__,
								param_i)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_i) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
								param_i) = D__(id__,
								param_i)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
							param_i) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_i) \ {terminate}
				
				STM_VS_O(id__,
							param_i) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_i) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							param_i) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Waiting::enter -> SKIP))))
						 	 [] dbisim((true)&(internal__!NID_Waiting -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							param_i) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							Waiting::enter,
							f::enter,
							i0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_Waiting|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   Waiting::D__(id__,
								   			param_i)
								   [| { share__, terminate } |] (
								   f::D__(id__,
								   			param_i)
								   [| { share__, terminate } |] (
								   i0::D__(id__,
								   			param_i)
								   )
								   )
								 )
								 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Waiting|}]]
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_i))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							param_i) = 
					dbisim((MachineBody(id__,
								param_i)\ enteredSS)
					)
				
				
				Stateful(id__,
							param_i) = 
					((
						(Behaviour(id__,
									param_i) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_i))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							param_i) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							Waiting::enter,
							f::enter,
							i0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_Waiting|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   Waiting::VS_O__(id__,
								   			param_i)
								   [| { share__, terminate } |] (
								   f::VS_O__(id__,
								   			param_i)
								   [| { share__, terminate } |] (
								   i0::VS_O__(id__,
								   			param_i)
								   )
								   )
								 )
								 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Waiting|}]]
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_i))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							param_i) = 
					dbisim((MachineBody_VS_O(id__,
								param_i))
					)
				
				
				Stateful_VS_O(id__,
							param_i) = 
					dbisim((
						(Behaviour_VS_O(id__,
									param_i) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_i))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							param_i) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							param_i) = STM_VS_O(id__,
							param_i)
				
				D__(id__,
							param_i) = STM(id__,
							param_i) \ internal_events
				O__(id__,
							param_i) = sbisim(diamond(D__(id__,
							param_i)))
				VS__(id__,
							param_i) = FVS__(id__,
							param_i)
				VS_O__(id__,
							param_i) = sbisim(diamond(FVS__(id__,
							param_i)))
				HEXT__(id__,
							param_i) = O__(id__,
							param_i) [|shared_variable_events|] SKIP
				HUP__(id__,
							param_i) = O__(id__,
							param_i) [|{share__}|] SKIP
						endmodule
			-- compileOperationDef
			module OP_waitInterval
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_f|
				              NID_j|
				              NID_i
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				f::enter,
				j::enter,
				i::enter
				|}
				
				enteredSS = 	{|
				f::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Final state: f
				module f
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__,
								param_m,
								param_n) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_m,
								param_n) = D__(id__,
								param_m,
								param_n)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j
				module j
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_m,
								param_n) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_m,
								param_n) = D__(id__,
								param_m,
								param_n)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i
				module i
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_m,
								param_n) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
								param_m,
								param_n) = D__(id__,
								param_m,
								param_n)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__waitOp(id__,
							param_i) = (OP_waitOp::O__(id__,
							param_i))
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
							param_m,
							param_n) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_m,
							param_n) \ {terminate}
				
				STM_VS_O(id__,
							param_m,
							param_n) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_m,
							param_n) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							param_m,
							param_n) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; j::enter -> SKIP))))
						 	 [] dbisim((true)&(internal__!NID_j -> SKIP ;  ((true&CALL__waitOp(
						 			id__,
						 			1
						 		) ; j::enter -> SKIP))))
						 	 [] dbisim((true)&(internal__!NID_j -> SKIP ;  ((SKIP ; f::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							param_m,
							param_n) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							j::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_j,internal__.NID_j|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::D__(id__,
								   			param_m,
								   			param_n)
								   [| { share__, terminate } |] (
								   j::D__(id__,
								   			param_m,
								   			param_n)
								   [| { share__, terminate } |] (
								   i::D__(id__,
								   			param_m,
								   			param_n)
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[j::interrupt <- x__ | x__ <- {|internal__.NID_j,internal__.NID_j|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__,
								 			param_m,
								 			param_n))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							param_m,
							param_n) = 
					dbisim((MachineBody(id__,
								param_m,
								param_n)\ enteredSS)
					)
				
				
				Stateful(id__,
							param_m,
							param_n) = 
					((
						(Behaviour(id__,
									param_m,
									param_n) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_m,
									param_n))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							param_m,
							param_n) = 
					dbisim((
					let
						finalNodesEntered = {|f::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							f::enter,
							j::enter,
							i::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i,internal__.NID_j,internal__.NID_j|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   f::VS_O__(id__,
								   			param_m,
								   			param_n)
								   [| { share__, terminate } |] (
								   j::VS_O__(id__,
								   			param_m,
								   			param_n)
								   [| { share__, terminate } |] (
								   i::VS_O__(id__,
								   			param_m,
								   			param_n)
								   )
								   )
								 )
								 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[j::interrupt <- x__ | x__ <- {|internal__.NID_j,internal__.NID_j|}]]
								 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i::enter -> Transitions(id__,
								 			param_m,
								 			param_n))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							param_m,
							param_n) = 
					dbisim((MachineBody_VS_O(id__,
								param_m,
								param_n))
					)
				
				
				Stateful_VS_O(id__,
							param_m,
							param_n) = 
					dbisim((
						(Behaviour_VS_O(id__,
									param_m,
									param_n) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_m,
									param_n))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							param_m,
							param_n) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							param_m,
							param_n) = STM_VS_O(id__,
							param_m,
							param_n)
				
				D__(id__,
							param_m,
							param_n) = STM(id__,
							param_m,
							param_n) \ internal_events
				O__(id__,
							param_m,
							param_n) = sbisim(diamond(D__(id__,
							param_m,
							param_n)))
				VS__(id__,
							param_m,
							param_n) = FVS__(id__,
							param_m,
							param_n)
				VS_O__(id__,
							param_m,
							param_n) = sbisim(diamond(FVS__(id__,
							param_m,
							param_n)))
				HEXT__(id__,
							param_m,
							param_n) = O__(id__,
							param_m,
							param_n) [|shared_variable_events|] SKIP
				HUP__(id__,
							param_m,
							param_n) = O__(id__,
							param_m,
							param_n) [|{share__}|] SKIP
						endmodule
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_Moving|
				              NID_Turning
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel obstacle__: NIDS.InOut
				channel obstacle: InOut
				
				-- Declaring call and ret events for undefined operations
				channel moveCall: core_real.core_real
				
				enterSS = {|
				i0::enter,
				Moving::enter,
				Turning::enter
				|}
				
				enteredSS = 	{|
				Moving::entered,
				Turning::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	obstacle
				,	moveCall
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = D__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Moving
				module Moving
				
				enterSS = 
						{|			i::enter,
							SEnd::enter
						|}
				enteredSS = 
						{|			SEnd::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i|
					              NID_SEnd
					
					channel internal__ : NIDS
					channel obstacle__: NIDS.InOut
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i
					module i
					exports
					
						channel enter, interrupt
						
						D__(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI) = D__(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: SEnd
					module SEnd
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__normal_SMMovement_Moving_entry(
									id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI,
									const_pkg466_main_SMMovement_lvel
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i::enter,
							 	SEnd::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i::D__(id__,
							 		   		    const_pkg466_main_SMMovement_lvel,
							 		   		    const_pkg466_main_SMMovement_avel,
							 		   		    const_pkg466_main_SMMovement_PI)
							 		   [| { share__, terminate } |] (
							 		   SEnd::D__(id__,
							 		   		    const_pkg466_main_SMMovement_lvel,
							 		   		    const_pkg466_main_SMMovement_avel,
							 		   		    const_pkg466_main_SMMovement_PI)
							 		   )
							 		 )
							 		 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		|}) |]
							 		 ((i::enter -> Transitions(id__,
							 		 		    const_pkg466_main_SMMovement_lvel,
							 		 		    const_pkg466_main_SMMovement_avel,
							 		 		    const_pkg466_main_SMMovement_PI))
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 		 )
							 		)
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		obstacle__.x____ <- obstacle
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__normal_SMMovement_Moving_entry(
									id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI,
									const_pkg466_main_SMMovement_lvel
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i::enter,
							 	SEnd::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i::VS_O__(id__,
							 		   		    const_pkg466_main_SMMovement_lvel,
							 		   		    const_pkg466_main_SMMovement_avel,
							 		   		    const_pkg466_main_SMMovement_PI)
							 		   [| { share__, terminate } |] (
							 		   SEnd::VS_O__(id__,
							 		   		    const_pkg466_main_SMMovement_lvel,
							 		   		    const_pkg466_main_SMMovement_avel,
							 		   		    const_pkg466_main_SMMovement_PI)
							 		   )
							 		 )
							 		 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		|}) |]
							 		 ((i::enter -> Transitions(id__,
							 		 		    const_pkg466_main_SMMovement_lvel,
							 		 		    const_pkg466_main_SMMovement_avel,
							 		 		    const_pkg466_main_SMMovement_PI))
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 		 )
							 		)
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		obstacle__.x____ <- obstacle
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = ((let
						Trans = (
							((share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; SEnd::enter -> SKIP))))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Turning
				module Turning
				
				enterSS = 
						{|			SEnd::enter,
							i::enter
						|}
				enteredSS = 
						{|			SEnd::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_SEnd|
					              NID_i
					
					channel internal__ : NIDS
					channel obstacle__: NIDS.InOut
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- State: SEnd
					module SEnd
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= SKIP ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Initial: i
					module i
					exports
					
						channel enter, interrupt
						
						D__(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI) = D__(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI)
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__move(
									id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI,
									0,
									const_pkg466_main_SMMovement_avel
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	SEnd::enter,
							 	i::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   SEnd::D__(id__,
							 		   		    const_pkg466_main_SMMovement_lvel,
							 		   		    const_pkg466_main_SMMovement_avel,
							 		   		    const_pkg466_main_SMMovement_PI)
							 		   [| { share__, terminate } |] (
							 		   i::D__(id__,
							 		   		    const_pkg466_main_SMMovement_lvel,
							 		   		    const_pkg466_main_SMMovement_avel,
							 		   		    const_pkg466_main_SMMovement_PI)
							 		   )
							 		 )
							 		 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		|}) |]
							 		 ((i::enter -> Transitions(id__,
							 		 		    const_pkg466_main_SMMovement_lvel,
							 		 		    const_pkg466_main_SMMovement_avel,
							 		 		    const_pkg466_main_SMMovement_PI))
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 		 )
							 		)
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		obstacle__.x____ <- obstacle
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__move(
									id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI,
									0,
									const_pkg466_main_SMMovement_avel
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	SEnd::enter,
							 	i::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_i|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   SEnd::VS_O__(id__,
							 		   		    const_pkg466_main_SMMovement_lvel,
							 		   		    const_pkg466_main_SMMovement_avel,
							 		   		    const_pkg466_main_SMMovement_PI)
							 		   [| { share__, terminate } |] (
							 		   i::VS_O__(id__,
							 		   		    const_pkg466_main_SMMovement_lvel,
							 		   		    const_pkg466_main_SMMovement_avel,
							 		   		    const_pkg466_main_SMMovement_PI)
							 		   )
							 		 )
							 		 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		|}) |]
							 		 ((i::enter -> Transitions(id__,
							 		 		    const_pkg466_main_SMMovement_lvel,
							 		 		    const_pkg466_main_SMMovement_avel,
							 		 		    const_pkg466_main_SMMovement_PI))
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 		 )
							 		)
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		obstacle__.x____ <- obstacle
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = ((let
						Trans = (
							((share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; SEnd::enter -> SKIP))))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				CALL__move(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI,
							param_lv,
							param_av) 	= moveCall.param_lv.param_av -> SKIP
				
				CALL__normal_SMMovement_Moving_entry(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = (OP_normal_SMMovement_Moving_entry::O__(id__,
						    const_pkg466_main_normal_SMMovement_Moving_entry_lvel))
				[[
					OP_normal_SMMovement_Moving_entry::moveCall <- moveCall
				]]
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI))
				)\sharedVarHide
				
				STM_VS_O(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Moving::enter -> SKIP))))
						 	 [] dbisim((true)&(obstacle__!NID_Moving.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Turning::enter -> SKIP)))
						 	 [] dbisim((true)&(internal__!NID_Turning -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Moving::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							Moving::enter,
							Turning::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,obstacle__.NID_Moving.in,internal__.NID_Turning|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__,
								   		    const_pkg466_main_SMMovement_lvel,
								   		    const_pkg466_main_SMMovement_avel,
								   		    const_pkg466_main_SMMovement_PI)
								   [| { share__, terminate } |] (
								   Moving::D__(id__,
								   		    const_pkg466_main_SMMovement_lvel,
								   		    const_pkg466_main_SMMovement_avel,
								   		    const_pkg466_main_SMMovement_PI)
								   [| { share__, terminate } |] (
								   Turning::D__(id__,
								   		    const_pkg466_main_SMMovement_lvel,
								   		    const_pkg466_main_SMMovement_avel,
								   		    const_pkg466_main_SMMovement_PI)
								   )
								   )
								 )
								 [[Moving::interrupt <- x__ | x__ <- {|interrupt,obstacle__.NID_Moving.in|}]]
								 [[Turning::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Turning|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 		    const_pkg466_main_SMMovement_lvel,
								 		    const_pkg466_main_SMMovement_avel,
								 		    const_pkg466_main_SMMovement_PI))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								obstacle__.x____ <- obstacle
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = 
					dbisim((MachineBody(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI)\ enteredSS)
					)
				
				IteratedBehaviour(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = 
					dbisim((MachineBody(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI)\ enteredSS)
					)
				
				Stateful(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = 
					((
						(Behaviour(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) =
					(Behaviour(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI))
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							Moving::enter,
							Turning::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,obstacle__.NID_Moving.in,internal__.NID_Turning|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__,
								   		    const_pkg466_main_SMMovement_lvel,
								   		    const_pkg466_main_SMMovement_avel,
								   		    const_pkg466_main_SMMovement_PI)
								   [| { share__, terminate } |] (
								   Moving::VS_O__(id__,
								   		    const_pkg466_main_SMMovement_lvel,
								   		    const_pkg466_main_SMMovement_avel,
								   		    const_pkg466_main_SMMovement_PI)
								   [| { share__, terminate } |] (
								   Turning::VS_O__(id__,
								   		    const_pkg466_main_SMMovement_lvel,
								   		    const_pkg466_main_SMMovement_avel,
								   		    const_pkg466_main_SMMovement_PI)
								   )
								   )
								 )
								 [[Moving::interrupt <- x__ | x__ <- {|interrupt,obstacle__.NID_Moving.in|}]]
								 [[Turning::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Turning|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 		    const_pkg466_main_SMMovement_lvel,
								 		    const_pkg466_main_SMMovement_avel,
								 		    const_pkg466_main_SMMovement_PI))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								obstacle__.x____ <- obstacle
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = 
					dbisim((MachineBody_VS_O(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI))
					)
				
				IteratedBehaviour_VS_O(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = 
					dbisim((MachineBody_VS_O(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI))
					)
				
				Stateful_VS_O(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = 
					dbisim((
						(Behaviour_VS_O(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) =
					(Behaviour_VS_O(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI))
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = STM_VS_O(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI)
				
				D__(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = STM(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) \ internal_events
				O__(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = sbisim(diamond(D__(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI)))
				VS__(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = FVS__(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI)
				VS_O__(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = sbisim(diamond(FVS__(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI)))
				HEXT__(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = O__(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) [|shared_variable_events|] SKIP
				HUP__(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = O__(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__,
						    const_pkg466_main_SMMovement_lvel,
						    const_pkg466_main_SMMovement_avel,
						    const_pkg466_main_SMMovement_PI) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			
				-- undefined operations
				CALL__move(id__,
						    param_lv,
						    param_av) 	= moveCall.param_lv.param_av -> SKIP
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__,
						    const_pkg466_main_Movement_stm_ref0_lvel,
						    const_pkg466_main_Movement_stm_ref0_avel,
						    const_pkg466_main_Movement_stm_ref0_PI) = 	((
						let
							const_pkg466_main_SMMovement_lvel = const_pkg466_main_Movement_stm_ref0_lvel
							const_pkg466_main_SMMovement_avel = const_pkg466_main_Movement_stm_ref0_avel
							const_pkg466_main_SMMovement_PI = const_pkg466_main_Movement_stm_ref0_PI
						within 
						stm_ref0::D__(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::obstacle <- obstacle,
							stm_ref0::moveCall <- moveCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				
				-- VS version
				VS__(id__,
						    const_pkg466_main_Movement_stm_ref0_lvel,
						    const_pkg466_main_Movement_stm_ref0_avel,
						    const_pkg466_main_Movement_stm_ref0_PI) = 	((
						let
							const_pkg466_main_SMMovement_lvel = const_pkg466_main_Movement_stm_ref0_lvel
							const_pkg466_main_SMMovement_avel = const_pkg466_main_Movement_stm_ref0_avel
							const_pkg466_main_SMMovement_PI = const_pkg466_main_Movement_stm_ref0_PI
						within 
						stm_ref0::VS__(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::obstacle <- obstacle,
							stm_ref0::moveCall <- moveCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__,
						    const_pkg466_main_Movement_stm_ref0_lvel,
						    const_pkg466_main_Movement_stm_ref0_avel,
						    const_pkg466_main_Movement_stm_ref0_PI) = sbisim(diamond(	((
						let
							const_pkg466_main_SMMovement_lvel = const_pkg466_main_Movement_stm_ref0_lvel
							const_pkg466_main_SMMovement_avel = const_pkg466_main_Movement_stm_ref0_avel
							const_pkg466_main_SMMovement_PI = const_pkg466_main_Movement_stm_ref0_PI
						within 
						stm_ref0::O__(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::obstacle <- obstacle,
							stm_ref0::moveCall <- moveCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
								
				-- VS_O version
				VS_O__(id__,
						    const_pkg466_main_Movement_stm_ref0_lvel,
						    const_pkg466_main_Movement_stm_ref0_avel,
						    const_pkg466_main_Movement_stm_ref0_PI) = sbisim(diamond(	((
						let
							const_pkg466_main_SMMovement_lvel = const_pkg466_main_Movement_stm_ref0_lvel
							const_pkg466_main_SMMovement_avel = const_pkg466_main_Movement_stm_ref0_avel
							const_pkg466_main_SMMovement_PI = const_pkg466_main_Movement_stm_ref0_PI
						within 
						stm_ref0::VS_O__(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::obstacle <- obstacle,
							stm_ref0::moveCall <- moveCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
			
				HEXT(id__,
						    const_pkg466_main_Movement_stm_ref0_lvel,
						    const_pkg466_main_Movement_stm_ref0_avel,
						    const_pkg466_main_Movement_stm_ref0_PI) = O__(id__,
						    const_pkg466_main_Movement_stm_ref0_lvel,
						    const_pkg466_main_Movement_stm_ref0_avel,
						    const_pkg466_main_Movement_stm_ref0_PI) [|shared_variable_events|] SKIP			
	
		endmodule
	
	-- declaring module memory
	Memory(id__) = SKIP
	
	D__(id__,
			    const_pkg466_main_Movement_stm_ref0_lvel,
			    const_pkg466_main_Movement_stm_ref0_avel,
			    const_pkg466_main_Movement_stm_ref0_PI) = 	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::D__(id__,
								    const_pkg466_main_Movement_stm_ref0_lvel,
								    const_pkg466_main_Movement_stm_ref0_avel,
								    const_pkg466_main_Movement_stm_ref0_PI)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::obstacle <- obstacle,
							ctrl_ref0::moveCall <- moveCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- visible state equivalent
	
	VS__(id__,
			    const_pkg466_main_Movement_stm_ref0_lvel,
			    const_pkg466_main_Movement_stm_ref0_avel,
			    const_pkg466_main_Movement_stm_ref0_PI) = 	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::VS__(id__,
								    const_pkg466_main_Movement_stm_ref0_lvel,
								    const_pkg466_main_Movement_stm_ref0_avel,
								    const_pkg466_main_Movement_stm_ref0_PI)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::obstacle <- obstacle,
							ctrl_ref0::moveCall <- moveCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- O version (optimised)
	
	O__(id__,
			    const_pkg466_main_Movement_stm_ref0_lvel,
			    const_pkg466_main_Movement_stm_ref0_avel,
			    const_pkg466_main_Movement_stm_ref0_PI) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::O__(id__,
								    const_pkg466_main_Movement_stm_ref0_lvel,
								    const_pkg466_main_Movement_stm_ref0_avel,
								    const_pkg466_main_Movement_stm_ref0_PI)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::obstacle <- obstacle,
							ctrl_ref0::moveCall <- moveCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
	-- visible state optimised equivalent
	
	VS_O__(id__,
			    const_pkg466_main_Movement_stm_ref0_lvel,
			    const_pkg466_main_Movement_stm_ref0_avel,
			    const_pkg466_main_Movement_stm_ref0_PI) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::VS_O__(id__,
								    const_pkg466_main_Movement_stm_ref0_lvel,
								    const_pkg466_main_Movement_stm_ref0_avel,
								    const_pkg466_main_Movement_stm_ref0_PI)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::obstacle <- obstacle,
							ctrl_ref0::moveCall <- moveCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
	-- O version (optimised) with visible assignments
	
	AS_O__(id__,
			    const_pkg466_main_Movement_stm_ref0_lvel,
			    const_pkg466_main_Movement_stm_ref0_avel,
			    const_pkg466_main_Movement_stm_ref0_PI) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::O__(id__,
								    const_pkg466_main_Movement_stm_ref0_lvel,
								    const_pkg466_main_Movement_stm_ref0_avel,
								    const_pkg466_main_Movement_stm_ref0_PI)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::obstacle <- obstacle,
							ctrl_ref0::moveCall <- moveCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
endmodule
