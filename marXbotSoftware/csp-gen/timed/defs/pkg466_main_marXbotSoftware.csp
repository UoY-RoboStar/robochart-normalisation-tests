
--
-- RoboChart generator version 3.0.0.202209090727
-- Automatically generated on 28-09-2022 20:22:29
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module pkg466_main_marXbotSoftware
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel obstacle: InOut
	
	channel moveCall: core_real.core_real
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	
	-- channel set with all visible events
	sem__events = {|
		obstacle
	,	moveCall
	|}
	
	-- declaring controller
		module ctrl_ref0
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel obstacle: InOut
			
			
			
			-- declaring call and ret events for undefined operations
			channel moveCall: core_real.core_real
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	obstacle
			,	moveCall
			|}
			
			-- set of visible memory events
			visibleMemoryEvents = {||}
	
			-- defined operations
			-- compileOperationDef
			module OP_normal_SMMovement_Moving_entry
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i|
				              NID_f|
				              NID_t_j_2_2
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				channel moveCall: core_real.core_real
				
				enterSS = {|
				i::enter,
				f::enter,
				t_j_2_2::enter
				|}
				
				enteredSS = 	{|
				f::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	moveCall
					, share__
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f : core_clock_type 
				--channel increment__
				
				CLID_f_clock_type(id__,
						          const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i
					module i
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
									    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = D__(id__,
									    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f
					module f
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
									    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = D__(id__,
									    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: t_j_2_2
					module t_j_2_2
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = D__(id__,
									    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					CALL__move(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel,
								param_lv,
								param_av) = EDeadline(moveCall.param_lv.param_av,0)
					
					CALL__waitOp(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel,
								param_i) = (OP_waitOp::O__(id__,
								param_i))
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) \ {terminate}
					
					STM_VS_O(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) \ {terminate}
					
					-- Transitions
					Transitions(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((true&CALL__move(
							 			id__,
							 		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel,
							 			const_pkg466_main_normal_SMMovement_Moving_entry_lvel,
							 			0
							 		) ; t_j_2_2::enter -> SKIP))))
							 [] dbisim((true)&(internal__!NID_t_j_2_2 -> SKIP ;  ((true&CALL__waitOp(
							 			id__,
							 		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel,
							 			1
							 		) ; f::enter -> SKIP))))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
						dbisim((
						let
							finalNodesEntered = {|f::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i::enter,
								f::enter,
								t_j_2_2::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i,internal__.NID_t_j_2_2|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i::D__(id__,
									   		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
									   [| { share__, terminate } |] (
									   f::D__(id__,
									   		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
									   [| { share__, terminate } |] (
									   t_j_2_2::D__(id__,
									   		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
									   )
									   )
									 )
									 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 [[t_j_2_2::interrupt <- x__ | x__ <- {|internal__.NID_t_j_2_2|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i::enter -> Transitions(id__,
									 		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody(id__,
									    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_pkg466_main_normal_SMMovement_Moving_entry_lvel)) \ union(stateClockSync,enteredSS)
						)
						)
					
					
					Stateful(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__,
									    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) [| {terminate} |] Clocks(id__,
							 		          const_pkg466_main_normal_SMMovement_Moving_entry_lvel))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
						dbisim((
						let
							finalNodesEntered = {|f::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i::enter,
								f::enter,
								t_j_2_2::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i,internal__.NID_t_j_2_2|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i::VS_O__(id__,
									   		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
									   [| { share__, terminate } |] (
									   f::VS_O__(id__,
									   		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
									   [| { share__, terminate } |] (
									   t_j_2_2::VS_O__(id__,
									   		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
									   )
									   )
									 )
									 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 [[t_j_2_2::interrupt <- x__ | x__ <- {|internal__.NID_t_j_2_2|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i::enter -> Transitions(id__,
									 		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody_VS_O(id__,
									    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_pkg466_main_normal_SMMovement_Moving_entry_lvel)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					
					Stateful_VS_O(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__,
									    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) [| {terminate} |] Clocks(id__,
							 		          const_pkg466_main_normal_SMMovement_Moving_entry_lvel))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = STM_VS_O(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) \ localClockResets
					D__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = timed_priority(STM(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) \ union(internal_events,localClockResets))
					O__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = dbisim(D__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel))
					VS__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = FVS__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel)
					VS_O__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = dbisim(FVS__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel))
					HEXT__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = O__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) [|shared_variable_events|] SKIP
					FVS_C__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = dbisim(timed_priority(STM(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) \ internal_events))
					HUP__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = timed_priority(O__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__,
							          const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = terminate -> SKIP
					
					clockSync = {||}
					
					
					StateClocks(id__,
							          const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = terminate -> SKIP
					
					stateClockSync = {||}
					}
						endmodule
			-- compileOperationDef
			module OP_tStop
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_sStop|
				              NID_i
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				sStop::enter,
				i::enter
				|}
				
				enteredSS = 	{|
				sStop::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					, share__
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_sStop : core_clock_type 
				--channel increment__
				
				CLID_sStop_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- State: sStop
					module sStop
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Initial: i
					module i
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__) = D__(id__)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__) \ {terminate}
					
					-- Transitions
					Transitions(id__) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; sStop::enter -> SKIP))))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								sStop::enter,
								i::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   sStop::D__(id__)
									   [| { share__, terminate } |] (
									   i::D__(id__)
									   )
									 )
									 [[sStop::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_sStop,sStop::entered|}
						 within
							(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					
					Stateful(id__) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					
					-- Visible counterparts
					MachineBody_VS_O(id__) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								sStop::enter,
								i::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   sStop::VS_O__(id__)
									   [| { share__, terminate } |] (
									   i::VS_O__(id__)
									   )
									 )
									 [[sStop::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i::enter -> Transitions(id__))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__) = 
						dbisim((let
							stateClockSync = {|get_CLID_sStop,sStop::entered|}
						 within
							(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					
					Stateful_VS_O(id__) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__) = STM_VS_O(id__) \ localClockResets
					D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
					O__(id__) = dbisim(D__(id__))
					VS__(id__) = FVS__(id__)
					VS_O__(id__) = dbisim(FVS__(id__))
					HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
					FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
					HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__) = terminate -> SKIP
					
					clockSync = {||}
					
					Clock_CLID_sStop(id__,x__) = 
						TimeOut_1(
							sStop::entered -> Clock_CLID_sStop(id__,0)
							[]
							get_CLID_sStop!x__ -> Clock_CLID_sStop(id__,x__)
							[]
							terminate -> SKIP,Clock_CLID_sStop(id__,clock_type_plus(x__,1,CLID_sStop_clock_type(id__))))
					
					StateClocks(id__) = dbisim(Clock_CLID_sStop(id__,0))
					
					stateClockSync = {|get_CLID_sStop,sStop::entered|}
					}
						endmodule
			-- compileOperationDef
			module OP_deadlineCheck
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_f|
				              NID_i
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				f::enter,
				i::enter
				|}
				
				enteredSS = 	{|
				f::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					, share__
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f : core_clock_type 
				--channel increment__
				
				CLID_f_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Final state: f
					module f
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
										param_d) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										param_d) = D__(id__,
										param_d)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Initial: i
					module i
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										param_d) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
										param_d) = D__(id__,
										param_d)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					CALL__tStop(id__) = (OP_tStop::O__(id__))
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
								param_d) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
								param_d) \ {terminate}
					
					STM_VS_O(id__,
								param_d) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
								param_d) \ {terminate}
					
					-- Transitions
					Transitions(id__,
								param_d) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((Deadline(true&CALL__tStop(
							 			id__
							 		),param_d) ; f::enter -> SKIP))))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
								param_d) = 
						dbisim((
						let
							finalNodesEntered = {|f::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								f::enter,
								i::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   f::D__(id__,
									   			param_d)
									   [| { share__, terminate } |] (
									   i::D__(id__,
									   			param_d)
									   )
									 )
									 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i::enter -> Transitions(id__,
									 			param_d))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
								param_d) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody(id__,
										param_d) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					
					Stateful(id__,
								param_d) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__,
										param_d) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 			param_d) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
								param_d) = 
						dbisim((
						let
							finalNodesEntered = {|f::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								f::enter,
								i::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   f::VS_O__(id__,
									   			param_d)
									   [| { share__, terminate } |] (
									   i::VS_O__(id__,
									   			param_d)
									   )
									 )
									 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i::enter -> Transitions(id__,
									 			param_d))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
								param_d) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody_VS_O(id__,
										param_d) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					
					Stateful_VS_O(id__,
								param_d) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__,
										param_d) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 			param_d) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__,
								param_d) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
								param_d) = STM_VS_O(id__,
								param_d) \ localClockResets
					D__(id__,
								param_d) = timed_priority(STM(id__,
								param_d) \ union(internal_events,localClockResets))
					O__(id__,
								param_d) = dbisim(D__(id__,
								param_d))
					VS__(id__,
								param_d) = FVS__(id__,
								param_d)
					VS_O__(id__,
								param_d) = dbisim(FVS__(id__,
								param_d))
					HEXT__(id__,
								param_d) = O__(id__,
								param_d) [|shared_variable_events|] SKIP
					FVS_C__(id__,
								param_d) = dbisim(timed_priority(STM(id__,
								param_d) \ internal_events))
					HUP__(id__,
								param_d) = timed_priority(O__(id__,
								param_d) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__) = terminate -> SKIP
					
					clockSync = {||}
					
					
					StateClocks(id__) = terminate -> SKIP
					
					stateClockSync = {||}
					}
						endmodule
			-- compileOperationDef
			module OP_waitOp
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_Waiting|
				              NID_f|
				              NID_i0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				Waiting::enter,
				f::enter,
				i0::enter
				|}
				
				enteredSS = 	{|
				Waiting::entered,
				f::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					, share__
					|}
				datatype ClockSet = 
					CLID_C
				
				channel clockReset, clockResetL, clockResetR : ClockSet
				
				localClockResets = {|clockReset.CLID_C|}
				
				
				channel get_CLID_Waiting : core_clock_type 
				channel get_CLID_f : core_clock_type 
				channel get_CLID_C : core_clock_type 
				--channel increment__
				
				CLID_Waiting_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_f_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_C_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				({param_i|param_i <- core_nat})
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- State: Waiting
					module Waiting
					
					enterSS = 
							{|			i::enter,
								SEnd::enter
							|}
					enteredSS = 
							{|			SEnd::entered
							|}
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						-- declaring identifiers of transitions
						datatype NIDS = 
						              NID_i|
						              NID_SEnd
						
						channel internal__ : NIDS
						
						channel get_CLID_SEnd : core_clock_type 
						--channel increment__
						
						CLID_SEnd_clock_type(id__) = 
							let
								max = (clock_type_max(Union({
						}))+1)
							ctype = {0..max}
						within
							if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
						
						
						--	Nodes
						-- declaring all nodes
						
						----------------------------------------------------------------------
						-- Initial: i
						module i
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
											param_i) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
								
								VS_O__(id__,
											param_i) = D__(id__,
											param_i)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- State: SEnd
						module SEnd
						
						enterSS = {}
						
						enteredSS = {}
						
						exports
						
							--  Declarations
							
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
											
							
							--channel increment__
							
							
							--	Nodes
							-- declaring all nodes
							
							
							Timed(OneStep) {
								--	Rule: behaviours(Node)
								--  Note that FDR has problems with efficiently compiling the process below
								-- 	if using a different recursion pattern.
								D__(id__,
											param_i) = 
								dbisim(let
									-- IMPLEMENTATION NOTE: 
									-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
									-- however FDR struggles with that form in certain cases. So we use the exception operator
									-- instead to 'terminate'.
									
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= SKIP ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
											param_i) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= SKIP ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
								
								
								-- Clocks
								
								StateClocks(id__) = terminate -> SKIP
								
								stateClockSync = {||}
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
										param_i) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 (((dbisim(
									 	sbisim(
									 		(let
									 			-- IMPLEMENTATION NOTE:
									 			-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 			-- modules for defining the semantics of each node.
									 			enterSS = {|
									 			i::enter,
									 			SEnd::enter
									 			|}
									 			hideSet = union(enterSS,{|exit,exited,internal__|})
									 		within 
									 			((let
									 				-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 				-- because CSPM modules are used for the semantics of Node.
									 				flowevts = union(enterSS,{|exit,exited,interrupt|})
									 				transSync = {|internal__.NID_i|}
									 			within
									 				((
									 				 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 				   i::D__(id__,
									 				   			param_i)
									 				   [| { share__, terminate } |] (
									 				   SEnd::D__(id__,
									 				   			param_i)
									 				   )
									 				 )
									 				 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
									 				 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 				 )
									 				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 				 )
									 				 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 				|}) |]
									 				 ((i::enter -> Transitions(id__,
									 				 			param_i))
									 				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 				 )
									 				)
									 				)
									 			)
									 			 \ hideSet)
									 		)
									 		[| {|get_CLID_SEnd,SEnd::entered,terminate|} |]
									 		dbisim(Clock_CLID_SEnd(id__,0))
									 	)\{|get_CLID_SEnd|}
									 )
									 ))
									  [[ share__ <- x__ | x__ <- {| share__,clockResetR.CLID_C |} ]] 
									  [[clockReset.CLID_C <- clockResetL.CLID_C]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,clockResetL.CLID_C
									 			,clockResetR.CLID_C
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
									  [[clockReset.CLID_C <- clockResetR.CLID_C]]
									 )
									)[[clockResetL.CLID_C <- clockReset.CLID_C]]
									 [[clockResetR.CLID_C <- clockReset.CLID_C]]
									)\union(enteredSS,{terminate}) 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										param_i) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= SKIP ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 (((dbisim(
									 	sbisim(
									 		(let
									 			-- IMPLEMENTATION NOTE:
									 			-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 			-- modules for defining the semantics of each node.
									 			enterSS = {|
									 			i::enter,
									 			SEnd::enter
									 			|}
									 			hideSet = union(enterSS,{|exit,exited,internal__|})
									 		within 
									 			((let
									 				-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 				-- because CSPM modules are used for the semantics of Node.
									 				flowevts = union(enterSS,{|exit,exited,interrupt|})
									 				transSync = {|internal__.NID_i|}
									 			within
									 				((
									 				 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 				   i::VS_O__(id__,
									 				   			param_i)
									 				   [| { share__, terminate } |] (
									 				   SEnd::VS_O__(id__,
									 				   			param_i)
									 				   )
									 				 )
									 				 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
									 				 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 				 )
									 				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 				 )
									 				 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 				|}) |]
									 				 ((i::enter -> Transitions(id__,
									 				 			param_i))
									 				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 				 )
									 				)
									 				)
									 			)
									 			 \ hideSet)
									 		)
									 		[| {|get_CLID_SEnd,SEnd::entered,terminate|} |]
									 		dbisim(Clock_CLID_SEnd(id__,0))
									 	)\{|get_CLID_SEnd|}
									 )
									 ))
									  [[ share__ <- x__ | x__ <- {| share__,clockResetR.CLID_C |} ]] 
									  [[clockReset.CLID_C <- clockResetL.CLID_C]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,clockResetL.CLID_C
									 			,clockResetR.CLID_C
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
									  [[clockReset.CLID_C <- clockResetR.CLID_C]]
									 )
									)[[clockResetL.CLID_C <- clockReset.CLID_C]]
									 [[clockResetR.CLID_C <- clockReset.CLID_C]]
									)\{terminate} 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
							within
								Inactive [| {terminate} |> SKIP)
							
							Transitions(id__,
										param_i) = ((let
								Trans = TimeOut_1(
									 (share__ -> SKIP
									 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; SEnd::enter -> SKIP))))
									 []
									 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
									 []
									 terminate -> SKIP
									 )
								,SKIP);Trans
							within
								Trans [|{terminate}|> SKIP
							)
							)
							
							
							-- Clocks
							Clock_CLID_SEnd(id__,x__) = 
								TimeOut_1(
									SEnd::entered -> Clock_CLID_SEnd(id__,0)
									[]
									get_CLID_SEnd!x__ -> Clock_CLID_SEnd(id__,x__)
									[]
									terminate -> SKIP,Clock_CLID_SEnd(id__,clock_type_plus(x__,1,CLID_SEnd_clock_type(id__))))
							
							StateClocks(id__) = dbisim(Clock_CLID_SEnd(id__,0))
							
							stateClockSync = {|get_CLID_SEnd,SEnd::entered|}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f
					module f
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
										param_i) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										param_i) = D__(id__,
										param_i)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										param_i) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
										param_i) = D__(id__,
										param_i)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
								param_i) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
								param_i) \ {terminate}
					
					STM_VS_O(id__,
								param_i) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
								param_i) \ {terminate}
					
					-- Transitions
					Transitions(id__,
								param_i) = ((let
						Trans = share__choice(get_CLID_C?C:CLID_C_clock_type(id__) -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(clockReset.CLID_C -> SKIP) ; Waiting::enter -> SKIP))))
							 [] dbisim(((C==param_i))&(internal__!NID_Waiting -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f::enter -> SKIP)))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
						)
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
								param_i) = 
						dbisim((
						let
							finalNodesEntered = {|f::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								Waiting::enter,
								f::enter,
								i0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0,internal__.NID_Waiting|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   Waiting::D__(id__,
									   			param_i)
									   [| { share__, terminate } |] (
									   f::D__(id__,
									   			param_i)
									   [| { share__, terminate } |] (
									   i0::D__(id__,
									   			param_i)
									   )
									   )
									 )
									 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Waiting|}]]
									 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[clockReset.CLID_C <- clockResetL.CLID_C]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,clockResetL.CLID_C
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 			param_i))
									  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
									 )
									)[[clockResetL.CLID_C <- clockReset.CLID_C]]
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
								param_i) = 
						dbisim((let
							stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
						 within
							(MachineBody(id__,
										param_i) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					
					Stateful(id__,
								param_i) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {|get_CLID_C,clockReset.CLID_C|}
						within
							(Behaviour(id__,
										param_i) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 			param_i) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
								param_i) = 
						dbisim((
						let
							finalNodesEntered = {|f::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								Waiting::enter,
								f::enter,
								i0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0,internal__.NID_Waiting|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   Waiting::VS_O__(id__,
									   			param_i)
									   [| { share__, terminate } |] (
									   f::VS_O__(id__,
									   			param_i)
									   [| { share__, terminate } |] (
									   i0::VS_O__(id__,
									   			param_i)
									   )
									   )
									 )
									 [[Waiting::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Waiting|}]]
									 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[clockReset.CLID_C <- clockResetL.CLID_C]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,clockResetL.CLID_C
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 			param_i))
									  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
									 )
									)[[clockResetL.CLID_C <- clockReset.CLID_C]]
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
								param_i) = 
						dbisim((let
							stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
						 within
							(MachineBody_VS_O(id__,
										param_i) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					
					Stateful_VS_O(id__,
								param_i) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {|get_CLID_C,clockReset.CLID_C|}
						within
							(Behaviour_VS_O(id__,
										param_i) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 			param_i) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__,
								param_i) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
								param_i) = STM_VS_O(id__,
								param_i) \ localClockResets
					D__(id__,
								param_i) = timed_priority(STM(id__,
								param_i) \ union(internal_events,localClockResets))
					O__(id__,
								param_i) = dbisim(D__(id__,
								param_i))
					VS__(id__,
								param_i) = FVS__(id__,
								param_i)
					VS_O__(id__,
								param_i) = dbisim(FVS__(id__,
								param_i))
					HEXT__(id__,
								param_i) = O__(id__,
								param_i) [|shared_variable_events|] SKIP
					FVS_C__(id__,
								param_i) = dbisim(timed_priority(STM(id__,
								param_i) \ internal_events))
					HUP__(id__,
								param_i) = timed_priority(O__(id__,
								param_i) [|{share__}|] SKIP)
					
					-- Clocks
					Clock_CLID_C(id__,x__) = 
						TimeOut_1(
							clockReset.CLID_C -> Clock_CLID_C(id__,0)
							[]
							get_CLID_C!x__ -> Clock_CLID_C(id__,x__)
							[]
							terminate -> SKIP,Clock_CLID_C(id__,clock_type_plus(x__,1,CLID_C_clock_type(id__))))
					
					Clocks(id__) = dbisim(Clock_CLID_C(id__,0))
					
					clockSync = {|get_CLID_C,clockReset.CLID_C|}
					
					Clock_CLID_Waiting(id__,x__) = 
						TimeOut_1(
							Waiting::entered -> Clock_CLID_Waiting(id__,0)
							[]
							get_CLID_Waiting!x__ -> Clock_CLID_Waiting(id__,x__)
							[]
							terminate -> SKIP,Clock_CLID_Waiting(id__,clock_type_plus(x__,1,CLID_Waiting_clock_type(id__))))
					
					StateClocks(id__) = dbisim(Clock_CLID_Waiting(id__,0))
					
					stateClockSync = {|get_CLID_Waiting,Waiting::entered|}
					}
						endmodule
			-- compileOperationDef
			module OP_waitInterval
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_f|
				              NID_j|
				              NID_i
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				f::enter,
				j::enter,
				i::enter
				|}
				
				enteredSS = 	{|
				f::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					, share__
					|}
				datatype ClockSet = 
					CLID_C
				
				channel clockReset, clockResetL, clockResetR : ClockSet
				
				localClockResets = {|clockReset.CLID_C|}
				
				
				channel get_CLID_f : core_clock_type 
				channel get_CLID_C : core_clock_type 
				--channel increment__
				
				CLID_f_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_C_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				({param_n|param_n <- core_nat}),
				({param_m|param_m <- core_nat})
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Final state: f
					module f
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
										param_m,
										param_n) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										param_m,
										param_n) = D__(id__,
										param_m,
										param_n)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j
					module j
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										param_m,
										param_n) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										param_m,
										param_n) = D__(id__,
										param_m,
										param_n)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Initial: i
					module i
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										param_m,
										param_n) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
										param_m,
										param_n) = D__(id__,
										param_m,
										param_n)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					
					CALL__waitOp(id__,
								param_i) = (OP_waitOp::O__(id__,
								param_i))
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
								param_m,
								param_n) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
								param_m,
								param_n) \ {terminate}
					
					STM_VS_O(id__,
								param_m,
								param_n) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
								param_m,
								param_n) \ {terminate}
					
					-- Transitions
					Transitions(id__,
								param_m,
								param_n) = ((let
						Trans = share__choice(get_CLID_C?C:CLID_C_clock_type(id__) -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((share__choice(clockReset.CLID_C -> SKIP) ; j::enter -> SKIP))))
							 [] dbisim(((C<param_n))&(internal__!NID_j -> SKIP ;  ((true&CALL__waitOp(
							 			id__,
							 			1
							 		) ; j::enter -> SKIP))))
							 [] dbisim(((C>=param_m))&(internal__!NID_j -> SKIP ;  ((SKIP ; f::enter -> SKIP))))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
						)
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
								param_m,
								param_n) = 
						dbisim((
						let
							finalNodesEntered = {|f::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								f::enter,
								j::enter,
								i::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i,internal__.NID_j,internal__.NID_j|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   f::D__(id__,
									   			param_m,
									   			param_n)
									   [| { share__, terminate } |] (
									   j::D__(id__,
									   			param_m,
									   			param_n)
									   [| { share__, terminate } |] (
									   i::D__(id__,
									   			param_m,
									   			param_n)
									   )
									   )
									 )
									 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[j::interrupt <- x__ | x__ <- {|internal__.NID_j,internal__.NID_j|}]]
									 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[clockReset.CLID_C <- clockResetL.CLID_C]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,clockResetL.CLID_C
									|}) |]
									 ((i::enter -> Transitions(id__,
									 			param_m,
									 			param_n))
									  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
									 )
									)[[clockResetL.CLID_C <- clockReset.CLID_C]]
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
								param_m,
								param_n) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody(id__,
										param_m,
										param_n) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					
					Stateful(id__,
								param_m,
								param_n) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {|get_CLID_C,clockReset.CLID_C|}
						within
							(Behaviour(id__,
										param_m,
										param_n) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 			param_m,
							 			param_n) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
								param_m,
								param_n) = 
						dbisim((
						let
							finalNodesEntered = {|f::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								f::enter,
								j::enter,
								i::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i,internal__.NID_j,internal__.NID_j|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   f::VS_O__(id__,
									   			param_m,
									   			param_n)
									   [| { share__, terminate } |] (
									   j::VS_O__(id__,
									   			param_m,
									   			param_n)
									   [| { share__, terminate } |] (
									   i::VS_O__(id__,
									   			param_m,
									   			param_n)
									   )
									   )
									 )
									 [[f::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[j::interrupt <- x__ | x__ <- {|internal__.NID_j,internal__.NID_j|}]]
									 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[clockReset.CLID_C <- clockResetL.CLID_C]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,clockResetL.CLID_C
									|}) |]
									 ((i::enter -> Transitions(id__,
									 			param_m,
									 			param_n))
									  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
									 )
									)[[clockResetL.CLID_C <- clockReset.CLID_C]]
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
								param_m,
								param_n) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody_VS_O(id__,
										param_m,
										param_n) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					
					Stateful_VS_O(id__,
								param_m,
								param_n) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {|get_CLID_C,clockReset.CLID_C|}
						within
							(Behaviour_VS_O(id__,
										param_m,
										param_n) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 			param_m,
							 			param_n) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__,
								param_m,
								param_n) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
								param_m,
								param_n) = STM_VS_O(id__,
								param_m,
								param_n) \ localClockResets
					D__(id__,
								param_m,
								param_n) = timed_priority(STM(id__,
								param_m,
								param_n) \ union(internal_events,localClockResets))
					O__(id__,
								param_m,
								param_n) = dbisim(D__(id__,
								param_m,
								param_n))
					VS__(id__,
								param_m,
								param_n) = FVS__(id__,
								param_m,
								param_n)
					VS_O__(id__,
								param_m,
								param_n) = dbisim(FVS__(id__,
								param_m,
								param_n))
					HEXT__(id__,
								param_m,
								param_n) = O__(id__,
								param_m,
								param_n) [|shared_variable_events|] SKIP
					FVS_C__(id__,
								param_m,
								param_n) = dbisim(timed_priority(STM(id__,
								param_m,
								param_n) \ internal_events))
					HUP__(id__,
								param_m,
								param_n) = timed_priority(O__(id__,
								param_m,
								param_n) [|{share__}|] SKIP)
					
					-- Clocks
					Clock_CLID_C(id__,x__) = 
						TimeOut_1(
							clockReset.CLID_C -> Clock_CLID_C(id__,0)
							[]
							get_CLID_C!x__ -> Clock_CLID_C(id__,x__)
							[]
							terminate -> SKIP,Clock_CLID_C(id__,clock_type_plus(x__,1,CLID_C_clock_type(id__))))
					
					Clocks(id__) = dbisim(Clock_CLID_C(id__,0))
					
					clockSync = {|get_CLID_C,clockReset.CLID_C|}
					
					
					StateClocks(id__) = terminate -> SKIP
					
					stateClockSync = {||}
					}
						endmodule
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_Moving|
				              NID_Turning
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel obstacle__: NIDS.InOut
				channel obstacle: InOut
				
				-- Declaring call and ret events for undefined operations
				channel moveCall: core_real.core_real
				
				enterSS = {|
				i0::enter,
				Moving::enter,
				Turning::enter
				|}
				
				enteredSS = 	{|
				Moving::entered,
				Turning::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	obstacle
				,	moveCall
					|}
				datatype ClockSet = 
					CLID_turnTimer
				
				channel clockReset, clockResetL, clockResetR : ClockSet
				
				localClockResets = {|clockReset.CLID_turnTimer|}
				
				
				channel get_CLID_turnTimer : core_clock_type 
				channel get_CLID_Turning : core_clock_type 
				channel get_CLID_Moving : core_clock_type 
				--channel increment__
				
				CLID_turnTimer_clock_type(id__,
						          const_pkg466_main_SMMovement_lvel,
						          const_pkg466_main_SMMovement_avel,
						          const_pkg466_main_SMMovement_PI) = 
					let
						max = (clock_type_max(Union({
				({Div(const_pkg466_main_SMMovement_PI, no_zero_div(const_pkg466_main_SMMovement_avel), core_real)|avel <- core_real,PI <- core_real})
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_Turning_clock_type(id__,
						          const_pkg466_main_SMMovement_lvel,
						          const_pkg466_main_SMMovement_avel,
						          const_pkg466_main_SMMovement_PI) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_Moving_clock_type(id__,
						          const_pkg466_main_SMMovement_lvel,
						          const_pkg466_main_SMMovement_avel,
						          const_pkg466_main_SMMovement_PI) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI) = D__(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Moving
					module Moving
					
					enterSS = 
							{|			i::enter,
								SEnd::enter
							|}
					enteredSS = 
							{|			SEnd::entered
							|}
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						-- declaring identifiers of transitions
						datatype NIDS = 
						              NID_i|
						              NID_SEnd
						
						channel internal__ : NIDS
						channel obstacle__: NIDS.InOut
						
						channel get_CLID_SEnd : core_clock_type 
						--channel increment__
						
						CLID_SEnd_clock_type(id__,
								          const_pkg466_main_SMMovement_lvel,
								          const_pkg466_main_SMMovement_avel,
								          const_pkg466_main_SMMovement_PI) = 
							let
								max = (clock_type_max(Union({
						}))+1)
							ctype = {0..max}
						within
							if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
						
						
						--	Nodes
						-- declaring all nodes
						
						----------------------------------------------------------------------
						-- Initial: i
						module i
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
								
								VS_O__(id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI) = D__(id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- State: SEnd
						module SEnd
						
						enterSS = {}
						
						enteredSS = {}
						
						exports
						
							--  Declarations
							
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
											
							
							--channel increment__
							
							
							--	Nodes
							-- declaring all nodes
							
							
							Timed(OneStep) {
								--	Rule: behaviours(Node)
								--  Note that FDR has problems with efficiently compiling the process below
								-- 	if using a different recursion pattern.
								D__(id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI) = 
								dbisim(let
									-- IMPLEMENTATION NOTE: 
									-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
									-- however FDR struggles with that form in certain cases. So we use the exception operator
									-- instead to 'terminate'.
									
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= SKIP ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= SKIP ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
								
								
								-- Clocks
								
								StateClocks(id__,
										          const_pkg466_main_SMMovement_lvel,
										          const_pkg466_main_SMMovement_avel,
										          const_pkg466_main_SMMovement_PI) = terminate -> SKIP
								
								stateClockSync = {||}
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__normal_SMMovement_Moving_entry(
											id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI,
											const_pkg466_main_SMMovement_lvel
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 (((dbisim(
									 	sbisim(
									 		(let
									 			-- IMPLEMENTATION NOTE:
									 			-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 			-- modules for defining the semantics of each node.
									 			enterSS = {|
									 			i::enter,
									 			SEnd::enter
									 			|}
									 			hideSet = union(enterSS,{|exit,exited,internal__|})
									 		within 
									 			((let
									 				-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 				-- because CSPM modules are used for the semantics of Node.
									 				flowevts = union(enterSS,{|exit,exited,interrupt|})
									 				transSync = {|internal__.NID_i|}
									 			within
									 				((
									 				 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 				   i::D__(id__,
									 				   		    const_pkg466_main_SMMovement_lvel,
									 				   		    const_pkg466_main_SMMovement_avel,
									 				   		    const_pkg466_main_SMMovement_PI)
									 				   [| { share__, terminate } |] (
									 				   SEnd::D__(id__,
									 				   		    const_pkg466_main_SMMovement_lvel,
									 				   		    const_pkg466_main_SMMovement_avel,
									 				   		    const_pkg466_main_SMMovement_PI)
									 				   )
									 				 )
									 				 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
									 				 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 				 )
									 				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 				 )
									 				 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 				|}) |]
									 				 ((i::enter -> Transitions(id__,
									 				 		    const_pkg466_main_SMMovement_lvel,
									 				 		    const_pkg466_main_SMMovement_avel,
									 				 		    const_pkg466_main_SMMovement_PI))
									 				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 				 )
									 				)
									 				)
									 			)
									 			 \ hideSet)
									 			[[
									 				obstacle__.x____ <- obstacle
									 				| x____ <- NIDS
									 			]]
									 		)
									 		[| {|get_CLID_SEnd,SEnd::entered,terminate|} |]
									 		dbisim(Clock_CLID_SEnd(id__,0,
									 				          const_pkg466_main_SMMovement_lvel,
									 				          const_pkg466_main_SMMovement_avel,
									 				          const_pkg466_main_SMMovement_PI))
									 	)\{|get_CLID_SEnd|}
									 )
									 ))
									  [[ share__ <- x__ | x__ <- {| share__,clockResetR.CLID_turnTimer |} ]] 
									  [[clockReset.CLID_turnTimer <- clockResetL.CLID_turnTimer]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,clockResetL.CLID_turnTimer
									 			,clockResetR.CLID_turnTimer
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_turnTimer |} ]]
									  [[clockReset.CLID_turnTimer <- clockResetR.CLID_turnTimer]]
									 )
									)[[clockResetL.CLID_turnTimer <- clockReset.CLID_turnTimer]]
									 [[clockResetR.CLID_turnTimer <- clockReset.CLID_turnTimer]]
									)\union(enteredSS,{terminate}) 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__normal_SMMovement_Moving_entry(
											id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI,
											const_pkg466_main_SMMovement_lvel
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 (((dbisim(
									 	sbisim(
									 		(let
									 			-- IMPLEMENTATION NOTE:
									 			-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 			-- modules for defining the semantics of each node.
									 			enterSS = {|
									 			i::enter,
									 			SEnd::enter
									 			|}
									 			hideSet = union(enterSS,{|exit,exited,internal__|})
									 		within 
									 			((let
									 				-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 				-- because CSPM modules are used for the semantics of Node.
									 				flowevts = union(enterSS,{|exit,exited,interrupt|})
									 				transSync = {|internal__.NID_i|}
									 			within
									 				((
									 				 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 				   i::VS_O__(id__,
									 				   		    const_pkg466_main_SMMovement_lvel,
									 				   		    const_pkg466_main_SMMovement_avel,
									 				   		    const_pkg466_main_SMMovement_PI)
									 				   [| { share__, terminate } |] (
									 				   SEnd::VS_O__(id__,
									 				   		    const_pkg466_main_SMMovement_lvel,
									 				   		    const_pkg466_main_SMMovement_avel,
									 				   		    const_pkg466_main_SMMovement_PI)
									 				   )
									 				 )
									 				 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
									 				 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 				 )
									 				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 				 )
									 				 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 				|}) |]
									 				 ((i::enter -> Transitions(id__,
									 				 		    const_pkg466_main_SMMovement_lvel,
									 				 		    const_pkg466_main_SMMovement_avel,
									 				 		    const_pkg466_main_SMMovement_PI))
									 				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 				 )
									 				)
									 				)
									 			)
									 			 \ hideSet)
									 			[[
									 				obstacle__.x____ <- obstacle
									 				| x____ <- NIDS
									 			]]
									 		)
									 		[| {|get_CLID_SEnd,SEnd::entered,terminate|} |]
									 		dbisim(Clock_CLID_SEnd(id__,0,
									 				          const_pkg466_main_SMMovement_lvel,
									 				          const_pkg466_main_SMMovement_avel,
									 				          const_pkg466_main_SMMovement_PI))
									 	)\{|get_CLID_SEnd|}
									 )
									 ))
									  [[ share__ <- x__ | x__ <- {| share__,clockResetR.CLID_turnTimer |} ]] 
									  [[clockReset.CLID_turnTimer <- clockResetL.CLID_turnTimer]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,clockResetL.CLID_turnTimer
									 			,clockResetR.CLID_turnTimer
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_turnTimer |} ]]
									  [[clockReset.CLID_turnTimer <- clockResetR.CLID_turnTimer]]
									 )
									)[[clockResetL.CLID_turnTimer <- clockReset.CLID_turnTimer]]
									 [[clockResetR.CLID_turnTimer <- clockReset.CLID_turnTimer]]
									)\{terminate} 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
							within
								Inactive [| {terminate} |> SKIP)
							
							Transitions(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI) = ((let
								Trans = TimeOut_1(
									 (share__ -> SKIP
									 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; SEnd::enter -> SKIP))))
									 []
									 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
									 []
									 terminate -> SKIP
									 )
								,SKIP);Trans
							within
								Trans [|{terminate}|> SKIP
							)
							)
							
							
							-- Clocks
							Clock_CLID_SEnd(id__,x__,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI) = 
								TimeOut_1(
									SEnd::entered -> Clock_CLID_SEnd(id__,0,
											          const_pkg466_main_SMMovement_lvel,
											          const_pkg466_main_SMMovement_avel,
											          const_pkg466_main_SMMovement_PI)
									[]
									get_CLID_SEnd!x__ -> Clock_CLID_SEnd(id__,x__,
											          const_pkg466_main_SMMovement_lvel,
											          const_pkg466_main_SMMovement_avel,
											          const_pkg466_main_SMMovement_PI)
									[]
									terminate -> SKIP,Clock_CLID_SEnd(id__,clock_type_plus(x__,1,CLID_SEnd_clock_type(id__,
											          const_pkg466_main_SMMovement_lvel,
											          const_pkg466_main_SMMovement_avel,
											          const_pkg466_main_SMMovement_PI)),
											          const_pkg466_main_SMMovement_lvel,
											          const_pkg466_main_SMMovement_avel,
											          const_pkg466_main_SMMovement_PI))
							
							StateClocks(id__,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI) = dbisim(Clock_CLID_SEnd(id__,0,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI))
							
							stateClockSync = {|get_CLID_SEnd,SEnd::entered|}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Turning
					module Turning
					
					enterSS = 
							{|			SEnd::enter,
								i::enter
							|}
					enteredSS = 
							{|			SEnd::entered
							|}
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						-- declaring identifiers of transitions
						datatype NIDS = 
						              NID_SEnd|
						              NID_i
						
						channel internal__ : NIDS
						channel obstacle__: NIDS.InOut
						
						channel get_CLID_SEnd : core_clock_type 
						--channel increment__
						
						CLID_SEnd_clock_type(id__,
								          const_pkg466_main_SMMovement_lvel,
								          const_pkg466_main_SMMovement_avel,
								          const_pkg466_main_SMMovement_PI) = 
							let
								max = (clock_type_max(Union({
						}))+1)
							ctype = {0..max}
						within
							if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
						
						
						--	Nodes
						-- declaring all nodes
						
						----------------------------------------------------------------------
						-- State: SEnd
						module SEnd
						
						enterSS = {}
						
						enteredSS = {}
						
						exports
						
							--  Declarations
							
							channel enter, entered, interrupt
							channel enteredL, enteredR
							
											
							
							--channel increment__
							
							
							--	Nodes
							-- declaring all nodes
							
							
							Timed(OneStep) {
								--	Rule: behaviours(Node)
								--  Note that FDR has problems with efficiently compiling the process below
								-- 	if using a different recursion pattern.
								D__(id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI) = 
								dbisim(let
									-- IMPLEMENTATION NOTE: 
									-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
									-- however FDR struggles with that form in certain cases. So we use the exception operator
									-- instead to 'terminate'.
									
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= SKIP ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
									
								VS_O__(id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= SKIP ; 
											 	  Behaviour ; 
											 	  share__choice(exit -> SKIP) ; SKIP ; 
											 	  share__choice(exited -> SKIP) ; Inactive
								
									Behaviour 	= entered -> During
									During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
								within
									Inactive [| {terminate} |> SKIP)
								
								
								-- Clocks
								
								StateClocks(id__,
										          const_pkg466_main_SMMovement_lvel,
										          const_pkg466_main_SMMovement_avel,
										          const_pkg466_main_SMMovement_PI) = terminate -> SKIP
								
								stateClockSync = {||}
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						----------------------------------------------------------------------
						-- Initial: i
						module i
						exports
						
							channel enter, interrupt
							
							Timed(OneStep) {
								D__(id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI) = 
									dbisim(let
										Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
										
										Termination = terminate -> SKIP
										
										Active 		= share__choice(interrupt -> SKIP) ; Inactive
									within
										Inactive [| {terminate} |> SKIP)
								
								VS_O__(id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI) = D__(id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI)
							}
						
						endmodule
						----------------------------------------------------------------------
						
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__move(
											id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI,
											0,
											const_pkg466_main_SMMovement_avel
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 (((dbisim(
									 	sbisim(
									 		(let
									 			-- IMPLEMENTATION NOTE:
									 			-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 			-- modules for defining the semantics of each node.
									 			enterSS = {|
									 			SEnd::enter,
									 			i::enter
									 			|}
									 			hideSet = union(enterSS,{|exit,exited,internal__|})
									 		within 
									 			((let
									 				-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 				-- because CSPM modules are used for the semantics of Node.
									 				flowevts = union(enterSS,{|exit,exited,interrupt|})
									 				transSync = {|internal__.NID_i|}
									 			within
									 				((
									 				 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 				   SEnd::D__(id__,
									 				   		    const_pkg466_main_SMMovement_lvel,
									 				   		    const_pkg466_main_SMMovement_avel,
									 				   		    const_pkg466_main_SMMovement_PI)
									 				   [| { share__, terminate } |] (
									 				   i::D__(id__,
									 				   		    const_pkg466_main_SMMovement_lvel,
									 				   		    const_pkg466_main_SMMovement_avel,
									 				   		    const_pkg466_main_SMMovement_PI)
									 				   )
									 				 )
									 				 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
									 				 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 				 )
									 				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 				 )
									 				 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 				|}) |]
									 				 ((i::enter -> Transitions(id__,
									 				 		    const_pkg466_main_SMMovement_lvel,
									 				 		    const_pkg466_main_SMMovement_avel,
									 				 		    const_pkg466_main_SMMovement_PI))
									 				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 				 )
									 				)
									 				)
									 			)
									 			 \ hideSet)
									 			[[
									 				obstacle__.x____ <- obstacle
									 				| x____ <- NIDS
									 			]]
									 		)
									 		[| {|get_CLID_SEnd,SEnd::entered,terminate|} |]
									 		dbisim(Clock_CLID_SEnd(id__,0,
									 				          const_pkg466_main_SMMovement_lvel,
									 				          const_pkg466_main_SMMovement_avel,
									 				          const_pkg466_main_SMMovement_PI))
									 	)\{|get_CLID_SEnd|}
									 )
									 ))
									  [[ share__ <- x__ | x__ <- {| share__,clockResetR.CLID_turnTimer |} ]] 
									  [[clockReset.CLID_turnTimer <- clockResetL.CLID_turnTimer]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,clockResetL.CLID_turnTimer
									 			,clockResetR.CLID_turnTimer
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_turnTimer |} ]]
									  [[clockReset.CLID_turnTimer <- clockResetR.CLID_turnTimer]]
									 )
									)[[clockResetL.CLID_turnTimer <- clockReset.CLID_turnTimer]]
									 [[clockResetR.CLID_turnTimer <- clockReset.CLID_turnTimer]]
									)\union(enteredSS,{terminate}) 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__move(
											id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI,
											0,
											const_pkg466_main_SMMovement_avel
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
							
								Behaviour 	= dbisim(
									((
									 (((dbisim(
									 	sbisim(
									 		(let
									 			-- IMPLEMENTATION NOTE:
									 			-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
									 			-- modules for defining the semantics of each node.
									 			enterSS = {|
									 			SEnd::enter,
									 			i::enter
									 			|}
									 			hideSet = union(enterSS,{|exit,exited,internal__|})
									 		within 
									 			((let
									 				-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									 				-- because CSPM modules are used for the semantics of Node.
									 				flowevts = union(enterSS,{|exit,exited,interrupt|})
									 				transSync = {|internal__.NID_i|}
									 			within
									 				((
									 				 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									 				   SEnd::VS_O__(id__,
									 				   		    const_pkg466_main_SMMovement_lvel,
									 				   		    const_pkg466_main_SMMovement_avel,
									 				   		    const_pkg466_main_SMMovement_PI)
									 				   [| { share__, terminate } |] (
									 				   i::VS_O__(id__,
									 				   		    const_pkg466_main_SMMovement_lvel,
									 				   		    const_pkg466_main_SMMovement_avel,
									 				   		    const_pkg466_main_SMMovement_PI)
									 				   )
									 				 )
									 				 [[SEnd::interrupt <- x__ | x__ <- {|interrupt|}]]
									 				 [[i::interrupt <- x__ | x__ <- {|internal__.NID_i|}]]
									 				 )
									 				  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 				 )
									 				 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 				|}) |]
									 				 ((i::enter -> Transitions(id__,
									 				 		    const_pkg466_main_SMMovement_lvel,
									 				 		    const_pkg466_main_SMMovement_avel,
									 				 		    const_pkg466_main_SMMovement_PI))
									 				  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 				 )
									 				)
									 				)
									 			)
									 			 \ hideSet)
									 			[[
									 				obstacle__.x____ <- obstacle
									 				| x____ <- NIDS
									 			]]
									 		)
									 		[| {|get_CLID_SEnd,SEnd::entered,terminate|} |]
									 		dbisim(Clock_CLID_SEnd(id__,0,
									 				          const_pkg466_main_SMMovement_lvel,
									 				          const_pkg466_main_SMMovement_avel,
									 				          const_pkg466_main_SMMovement_PI))
									 	)\{|get_CLID_SEnd|}
									 )
									 ))
									  [[ share__ <- x__ | x__ <- {| share__,clockResetR.CLID_turnTimer |} ]] 
									  [[clockReset.CLID_turnTimer <- clockResetL.CLID_turnTimer]]
									 )
									 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
									 			,clockResetL.CLID_turnTimer
									 			,clockResetR.CLID_turnTimer
									 			|}) |]
									 ((During)
									  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_turnTimer |} ]]
									  [[clockReset.CLID_turnTimer <- clockResetR.CLID_turnTimer]]
									 )
									)[[clockResetL.CLID_turnTimer <- clockReset.CLID_turnTimer]]
									 [[clockResetR.CLID_turnTimer <- clockReset.CLID_turnTimer]]
									)\{terminate} 
								)
								During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
										 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
							within
								Inactive [| {terminate} |> SKIP)
							
							Transitions(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI) = ((let
								Trans = TimeOut_1(
									 (share__ -> SKIP
									 [] dbisim((true)&(internal__!NID_i -> SKIP ;  ((SKIP ; SEnd::enter -> SKIP))))
									 []
									 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
									 []
									 terminate -> SKIP
									 )
								,SKIP);Trans
							within
								Trans [|{terminate}|> SKIP
							)
							)
							
							
							-- Clocks
							Clock_CLID_SEnd(id__,x__,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI) = 
								TimeOut_1(
									SEnd::entered -> Clock_CLID_SEnd(id__,0,
											          const_pkg466_main_SMMovement_lvel,
											          const_pkg466_main_SMMovement_avel,
											          const_pkg466_main_SMMovement_PI)
									[]
									get_CLID_SEnd!x__ -> Clock_CLID_SEnd(id__,x__,
											          const_pkg466_main_SMMovement_lvel,
											          const_pkg466_main_SMMovement_avel,
											          const_pkg466_main_SMMovement_PI)
									[]
									terminate -> SKIP,Clock_CLID_SEnd(id__,clock_type_plus(x__,1,CLID_SEnd_clock_type(id__,
											          const_pkg466_main_SMMovement_lvel,
											          const_pkg466_main_SMMovement_avel,
											          const_pkg466_main_SMMovement_PI)),
											          const_pkg466_main_SMMovement_lvel,
											          const_pkg466_main_SMMovement_avel,
											          const_pkg466_main_SMMovement_PI))
							
							StateClocks(id__,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI) = dbisim(Clock_CLID_SEnd(id__,0,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI))
							
							stateClockSync = {|get_CLID_SEnd,SEnd::entered|}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					CALL__move(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI,
								param_lv,
								param_av) = EDeadline(moveCall.param_lv.param_av,0)
					
					CALL__normal_SMMovement_Moving_entry(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel) = (OP_normal_SMMovement_Moving_entry::O__(id__,
							    const_pkg466_main_normal_SMMovement_Moving_entry_lvel))
					[[
						OP_normal_SMMovement_Moving_entry::moveCall <- moveCall
					]]
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					STM_VS_O(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_pkg466_main_SMMovement_lvel,
								    const_pkg466_main_SMMovement_avel,
								    const_pkg466_main_SMMovement_PI))
					)\sharedVarHide
					,<{terminate},{tock}>)
					
					-- Transitions
					Transitions(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = ((let
						Trans = share__choice(get_CLID_turnTimer?turnTimer:CLID_turnTimer_clock_type(id__,
								          const_pkg466_main_SMMovement_lvel,
								          const_pkg466_main_SMMovement_avel,
								          const_pkg466_main_SMMovement_PI) -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Moving::enter -> SKIP))))
							 [] dbisim((true)&(obstacle__!NID_Moving.in -> SKIP ; (share__choice(clockReset.CLID_turnTimer -> SKIP) ; share__choice(SKIP))
							 ; share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Turning::enter -> SKIP)))
							 [] dbisim(((turnTimer>=Div(const_pkg466_main_SMMovement_PI, const_pkg466_main_SMMovement_avel, core_real)))&(internal__!NID_Turning -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Moving::enter -> SKIP)))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
						)
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								Moving::enter,
								Turning::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0,obstacle__.NID_Moving.in,internal__.NID_Turning|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::D__(id__,
									   		    const_pkg466_main_SMMovement_lvel,
									   		    const_pkg466_main_SMMovement_avel,
									   		    const_pkg466_main_SMMovement_PI)
									   [| { share__, terminate } |] (
									   Moving::D__(id__,
									   		    const_pkg466_main_SMMovement_lvel,
									   		    const_pkg466_main_SMMovement_avel,
									   		    const_pkg466_main_SMMovement_PI)
									   [| { share__, terminate } |] (
									   Turning::D__(id__,
									   		    const_pkg466_main_SMMovement_lvel,
									   		    const_pkg466_main_SMMovement_avel,
									   		    const_pkg466_main_SMMovement_PI)
									   )
									   )
									 )
									 [[Moving::interrupt <- x__ | x__ <- {|interrupt,obstacle__.NID_Moving.in|}]]
									 [[Turning::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Turning|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[clockReset.CLID_turnTimer <- clockResetL.CLID_turnTimer]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,clockResetL.CLID_turnTimer
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_pkg466_main_SMMovement_lvel,
									 		    const_pkg466_main_SMMovement_avel,
									 		    const_pkg466_main_SMMovement_PI))
									  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_turnTimer |} ]]
									 )
									)[[clockResetL.CLID_turnTimer <- clockReset.CLID_turnTimer]]
									)
								)
								 \ hideSet)
								[[
									obstacle__.x____ <- obstacle
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_pkg466_main_SMMovement_lvel,
							 		          const_pkg466_main_SMMovement_avel,
							 		          const_pkg466_main_SMMovement_PI)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = 
						dbisim((let
							stateClockSync = {|get_CLID_Turning,Turning::entered,get_CLID_Moving,Moving::entered|}
						 within
							(MachineBody(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = 
						dbisim((let
							stateClockSync = {|get_CLID_Turning,Turning::entered,get_CLID_Moving,Moving::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											MachineBody(id__,
													    const_pkg466_main_SMMovement_lvel,
													    const_pkg466_main_SMMovement_avel,
													    const_pkg466_main_SMMovement_PI)
											[| {|get_CLID_Moving,Moving::entered,terminate|} |]
											dbisim(Clock_CLID_Moving(id__,0,
													          const_pkg466_main_SMMovement_lvel,
													          const_pkg466_main_SMMovement_avel,
													          const_pkg466_main_SMMovement_PI))
										)\{|get_CLID_Moving|}
									)
									[| {|get_CLID_Turning,Turning::entered,terminate|} |]
									dbisim(Clock_CLID_Turning(id__,0,
											          const_pkg466_main_SMMovement_lvel,
											          const_pkg466_main_SMMovement_avel,
											          const_pkg466_main_SMMovement_PI))
								)\{|get_CLID_Turning|}
							)
							) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {|get_CLID_turnTimer,clockReset.CLID_turnTimer|}
						within
							(Behaviour(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_pkg466_main_SMMovement_lvel,
							 		    const_pkg466_main_SMMovement_avel,
							 		    const_pkg466_main_SMMovement_PI) [| {terminate} |] Clocks(id__,
							 		          const_pkg466_main_SMMovement_lvel,
							 		          const_pkg466_main_SMMovement_avel,
							 		          const_pkg466_main_SMMovement_PI))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) =
						(dbisim(
							sbisim(
								IteratedBehaviour(id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI)
								[| {|get_CLID_turnTimer,clockReset.CLID_turnTimer,terminate|} |]
								dbisim(Clock_CLID_turnTimer(id__,0,
										          const_pkg466_main_SMMovement_lvel,
										          const_pkg466_main_SMMovement_avel,
										          const_pkg466_main_SMMovement_PI))
							)\{|get_CLID_turnTimer,clockReset.CLID_turnTimer|}
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								Moving::enter,
								Turning::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0,obstacle__.NID_Moving.in,internal__.NID_Turning|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::VS_O__(id__,
									   		    const_pkg466_main_SMMovement_lvel,
									   		    const_pkg466_main_SMMovement_avel,
									   		    const_pkg466_main_SMMovement_PI)
									   [| { share__, terminate } |] (
									   Moving::VS_O__(id__,
									   		    const_pkg466_main_SMMovement_lvel,
									   		    const_pkg466_main_SMMovement_avel,
									   		    const_pkg466_main_SMMovement_PI)
									   [| { share__, terminate } |] (
									   Turning::VS_O__(id__,
									   		    const_pkg466_main_SMMovement_lvel,
									   		    const_pkg466_main_SMMovement_avel,
									   		    const_pkg466_main_SMMovement_PI)
									   )
									   )
									 )
									 [[Moving::interrupt <- x__ | x__ <- {|interrupt,obstacle__.NID_Moving.in|}]]
									 [[Turning::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Turning|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[clockReset.CLID_turnTimer <- clockResetL.CLID_turnTimer]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,clockResetL.CLID_turnTimer
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_pkg466_main_SMMovement_lvel,
									 		    const_pkg466_main_SMMovement_avel,
									 		    const_pkg466_main_SMMovement_PI))
									  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_turnTimer |} ]]
									 )
									)[[clockResetL.CLID_turnTimer <- clockReset.CLID_turnTimer]]
									)
								)
								 \ hideSet)
								[[
									obstacle__.x____ <- obstacle
									| x____ <- NIDS
								]]
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_pkg466_main_SMMovement_lvel,
							 		          const_pkg466_main_SMMovement_avel,
							 		          const_pkg466_main_SMMovement_PI)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = 
						dbisim((let
							stateClockSync = {|get_CLID_Turning,Turning::entered,get_CLID_Moving,Moving::entered|}
						 within
							(MachineBody_VS_O(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = 
						dbisim((let
							stateClockSync = {|get_CLID_Turning,Turning::entered,get_CLID_Moving,Moving::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											MachineBody_VS_O(id__,
													    const_pkg466_main_SMMovement_lvel,
													    const_pkg466_main_SMMovement_avel,
													    const_pkg466_main_SMMovement_PI)
											[| {|get_CLID_Moving,Moving::entered,terminate|} |]
											dbisim(Clock_CLID_Moving(id__,0,
													          const_pkg466_main_SMMovement_lvel,
													          const_pkg466_main_SMMovement_avel,
													          const_pkg466_main_SMMovement_PI))
										)\{|get_CLID_Moving|}
									)
									[| {|get_CLID_Turning,Turning::entered,terminate|} |]
									dbisim(Clock_CLID_Turning(id__,0,
											          const_pkg466_main_SMMovement_lvel,
											          const_pkg466_main_SMMovement_avel,
											          const_pkg466_main_SMMovement_PI))
								)\{|get_CLID_Turning|}
							)
							) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {|get_CLID_turnTimer,clockReset.CLID_turnTimer|}
						within
							(Behaviour_VS_O(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_pkg466_main_SMMovement_lvel,
							 		    const_pkg466_main_SMMovement_avel,
							 		    const_pkg466_main_SMMovement_PI) [| {terminate} |] Clocks(id__,
							 		          const_pkg466_main_SMMovement_lvel,
							 		          const_pkg466_main_SMMovement_avel,
							 		          const_pkg466_main_SMMovement_PI))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) =
						(dbisim(
							sbisim(
								IteratedBehaviour_VS_O(id__,
										    const_pkg466_main_SMMovement_lvel,
										    const_pkg466_main_SMMovement_avel,
										    const_pkg466_main_SMMovement_PI)
								[| {|get_CLID_turnTimer,clockReset.CLID_turnTimer,terminate|} |]
								dbisim(Clock_CLID_turnTimer(id__,0,
										          const_pkg466_main_SMMovement_lvel,
										          const_pkg466_main_SMMovement_avel,
										          const_pkg466_main_SMMovement_PI))
							)\{|get_CLID_turnTimer,clockReset.CLID_turnTimer|}
						)
						)
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = STM_VS_O(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) \ localClockResets
					D__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = timed_priority(STM(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) \ union(internal_events,localClockResets))
					O__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = dbisim(D__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI))
					VS__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = FVS__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI)
					VS_O__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = dbisim(FVS__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI))
					HEXT__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = O__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) [|shared_variable_events|] SKIP
					FVS_C__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = dbisim(timed_priority(STM(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) \ internal_events))
					HUP__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = timed_priority(O__(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) [|{share__}|] SKIP)
					
					-- Clocks
					Clock_CLID_turnTimer(id__,x__,
							          const_pkg466_main_SMMovement_lvel,
							          const_pkg466_main_SMMovement_avel,
							          const_pkg466_main_SMMovement_PI) = 
						TimeOut_1(
							clockReset.CLID_turnTimer -> Clock_CLID_turnTimer(id__,0,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI)
							[]
							get_CLID_turnTimer!x__ -> Clock_CLID_turnTimer(id__,x__,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI)
							[]
							terminate -> SKIP,Clock_CLID_turnTimer(id__,clock_type_plus(x__,1,CLID_turnTimer_clock_type(id__,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI)),
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI))
					
					Clocks(id__,
							          const_pkg466_main_SMMovement_lvel,
							          const_pkg466_main_SMMovement_avel,
							          const_pkg466_main_SMMovement_PI) = dbisim(Clock_CLID_turnTimer(id__,0,
							          const_pkg466_main_SMMovement_lvel,
							          const_pkg466_main_SMMovement_avel,
							          const_pkg466_main_SMMovement_PI))
					
					clockSync = {|get_CLID_turnTimer,clockReset.CLID_turnTimer|}
					
					Clock_CLID_Turning(id__,x__,
							          const_pkg466_main_SMMovement_lvel,
							          const_pkg466_main_SMMovement_avel,
							          const_pkg466_main_SMMovement_PI) = 
						TimeOut_1(
							Turning::entered -> Clock_CLID_Turning(id__,0,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI)
							[]
							get_CLID_Turning!x__ -> Clock_CLID_Turning(id__,x__,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI)
							[]
							terminate -> SKIP,Clock_CLID_Turning(id__,clock_type_plus(x__,1,CLID_Turning_clock_type(id__,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI)),
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI))
					Clock_CLID_Moving(id__,x__,
							          const_pkg466_main_SMMovement_lvel,
							          const_pkg466_main_SMMovement_avel,
							          const_pkg466_main_SMMovement_PI) = 
						TimeOut_1(
							Moving::entered -> Clock_CLID_Moving(id__,0,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI)
							[]
							get_CLID_Moving!x__ -> Clock_CLID_Moving(id__,x__,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI)
							[]
							terminate -> SKIP,Clock_CLID_Moving(id__,clock_type_plus(x__,1,CLID_Moving_clock_type(id__,
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI)),
									          const_pkg466_main_SMMovement_lvel,
									          const_pkg466_main_SMMovement_avel,
									          const_pkg466_main_SMMovement_PI))
					
					StateClocks(id__,
							          const_pkg466_main_SMMovement_lvel,
							          const_pkg466_main_SMMovement_avel,
							          const_pkg466_main_SMMovement_PI) = dbisim(Clock_CLID_Turning(id__,0,
							          const_pkg466_main_SMMovement_lvel,
							          const_pkg466_main_SMMovement_avel,
							          const_pkg466_main_SMMovement_PI))
					[| { terminate } |] (
					dbisim(Clock_CLID_Moving(id__,0,
							          const_pkg466_main_SMMovement_lvel,
							          const_pkg466_main_SMMovement_avel,
							          const_pkg466_main_SMMovement_PI))
					)
					
					stateClockSync = {|get_CLID_Turning,Turning::entered,get_CLID_Moving,Moving::entered|}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__,
							    const_pkg466_main_SMMovement_lvel,
							    const_pkg466_main_SMMovement_avel,
							    const_pkg466_main_SMMovement_PI) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					CALL__move(id__,
							    param_lv,
							    param_av) 	= moveCall.param_lv.param_av -> SKIP
					
					-- declaring controller memory
					Memory(id__) = SKIP
					
					D__(id__,
							    const_pkg466_main_Movement_stm_ref0_lvel,
							    const_pkg466_main_Movement_stm_ref0_avel,
							    const_pkg466_main_Movement_stm_ref0_PI) = prioritise(	((
							let
								const_pkg466_main_SMMovement_lvel = const_pkg466_main_Movement_stm_ref0_lvel
								const_pkg466_main_SMMovement_avel = const_pkg466_main_Movement_stm_ref0_avel
								const_pkg466_main_SMMovement_PI = const_pkg466_main_Movement_stm_ref0_PI
							within 
							stm_ref0::D__(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::obstacle <- obstacle,
								stm_ref0::moveCall <- moveCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
					
					-- VS version
					VS__(id__,
							    const_pkg466_main_Movement_stm_ref0_lvel,
							    const_pkg466_main_Movement_stm_ref0_avel,
							    const_pkg466_main_Movement_stm_ref0_PI) = prioritise(	((
							let
								const_pkg466_main_SMMovement_lvel = const_pkg466_main_Movement_stm_ref0_lvel
								const_pkg466_main_SMMovement_avel = const_pkg466_main_Movement_stm_ref0_avel
								const_pkg466_main_SMMovement_PI = const_pkg466_main_Movement_stm_ref0_PI
							within 
							stm_ref0::VS__(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::obstacle <- obstacle,
								stm_ref0::moveCall <- moveCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__,
							    const_pkg466_main_Movement_stm_ref0_lvel,
							    const_pkg466_main_Movement_stm_ref0_avel,
							    const_pkg466_main_Movement_stm_ref0_PI) = dbisim(prioritise(	((
							let
								const_pkg466_main_SMMovement_lvel = const_pkg466_main_Movement_stm_ref0_lvel
								const_pkg466_main_SMMovement_avel = const_pkg466_main_Movement_stm_ref0_avel
								const_pkg466_main_SMMovement_PI = const_pkg466_main_Movement_stm_ref0_PI
							within 
							stm_ref0::O__(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::obstacle <- obstacle,
								stm_ref0::moveCall <- moveCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
									
					-- VS_O version
					VS_O__(id__,
							    const_pkg466_main_Movement_stm_ref0_lvel,
							    const_pkg466_main_Movement_stm_ref0_avel,
							    const_pkg466_main_Movement_stm_ref0_PI) = dbisim(prioritise(	((
							let
								const_pkg466_main_SMMovement_lvel = const_pkg466_main_Movement_stm_ref0_lvel
								const_pkg466_main_SMMovement_avel = const_pkg466_main_Movement_stm_ref0_avel
								const_pkg466_main_SMMovement_PI = const_pkg466_main_Movement_stm_ref0_PI
							within 
							stm_ref0::VS_O__(id__,
									    const_pkg466_main_SMMovement_lvel,
									    const_pkg466_main_SMMovement_avel,
									    const_pkg466_main_SMMovement_PI)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::obstacle <- obstacle,
								stm_ref0::moveCall <- moveCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<union(visibleMemoryEvents,{terminate}),{tock}>))
				
					HEXT(id__,
							    const_pkg466_main_Movement_stm_ref0_lvel,
							    const_pkg466_main_Movement_stm_ref0_avel,
							    const_pkg466_main_Movement_stm_ref0_PI) = O__(id__,
							    const_pkg466_main_Movement_stm_ref0_lvel,
							    const_pkg466_main_Movement_stm_ref0_avel,
							    const_pkg466_main_Movement_stm_ref0_PI) [|shared_variable_events|] SKIP			
			}
	
		endmodule
	
	Timed(OneStep) {
		visibleMemoryEvents = {||}
		
		-- declaring module memory
		Memory(id__) = SKIP
		
		D__(id__,
				    const_pkg466_main_Movement_stm_ref0_lvel,
				    const_pkg466_main_Movement_stm_ref0_avel,
				    const_pkg466_main_Movement_stm_ref0_PI) = prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref0::D__(id__,
									    const_pkg466_main_Movement_stm_ref0_lvel,
									    const_pkg466_main_Movement_stm_ref0_avel,
									    const_pkg466_main_Movement_stm_ref0_PI)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::obstacle <- obstacle,
								ctrl_ref0::moveCall <- moveCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- visible state equivalent
		
		VS__(id__,
				    const_pkg466_main_Movement_stm_ref0_lvel,
				    const_pkg466_main_Movement_stm_ref0_avel,
				    const_pkg466_main_Movement_stm_ref0_PI) = prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref0::VS__(id__,
									    const_pkg466_main_Movement_stm_ref0_lvel,
									    const_pkg466_main_Movement_stm_ref0_avel,
									    const_pkg466_main_Movement_stm_ref0_PI)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::obstacle <- obstacle,
								ctrl_ref0::moveCall <- moveCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- O version (optimised)
		
		O__(id__,
				    const_pkg466_main_Movement_stm_ref0_lvel,
				    const_pkg466_main_Movement_stm_ref0_avel,
				    const_pkg466_main_Movement_stm_ref0_PI) = dbisim(prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref0::O__(id__,
									    const_pkg466_main_Movement_stm_ref0_lvel,
									    const_pkg466_main_Movement_stm_ref0_avel,
									    const_pkg466_main_Movement_stm_ref0_PI)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::obstacle <- obstacle,
								ctrl_ref0::moveCall <- moveCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- visible state optimised equivalent
		
		VS_O__(id__,
				    const_pkg466_main_Movement_stm_ref0_lvel,
				    const_pkg466_main_Movement_stm_ref0_avel,
				    const_pkg466_main_Movement_stm_ref0_PI) = dbisim(prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref0::VS_O__(id__,
									    const_pkg466_main_Movement_stm_ref0_lvel,
									    const_pkg466_main_Movement_stm_ref0_avel,
									    const_pkg466_main_Movement_stm_ref0_PI)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::obstacle <- obstacle,
								ctrl_ref0::moveCall <- moveCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- O version (optimised) with visible assignments
		
		AS_O__(id__,
				    const_pkg466_main_Movement_stm_ref0_lvel,
				    const_pkg466_main_Movement_stm_ref0_avel,
				    const_pkg466_main_Movement_stm_ref0_PI) = dbisim(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref0::O__(id__,
									    const_pkg466_main_Movement_stm_ref0_lvel,
									    const_pkg466_main_Movement_stm_ref0_avel,
									    const_pkg466_main_Movement_stm_ref0_PI)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::obstacle <- obstacle,
								ctrl_ref0::moveCall <- moveCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		)
	}
	
endmodule
